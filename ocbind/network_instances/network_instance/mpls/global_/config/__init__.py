# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/mpls/global/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top level global MPLS configuration
  """
  __slots__ = ('_path_helper', '_extmethods', '__null_label','__ttl_propagation','__pw_encapsulation',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__null_label = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), default=six.text_type("oc-mplst:IMPLICIT"), is_leaf=True, yang_name="null-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    self.__ttl_propagation = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="ttl-propagation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)
    self.__pw_encapsulation = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), is_leaf=True, yang_name="pw-encapsulation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'mpls', 'global', 'config']

  def _get_null_label(self):
    """
    Getter method for null_label, mapped from YANG variable /network_instances/network_instance/mpls/global/config/null_label (identityref)

    YANG Description: The null-label type used, implicit or explicit
    """
    return self.__null_label
      
  def _set_null_label(self, v, load=False):
    """
    Setter method for null_label, mapped from YANG variable /network_instances/network_instance/mpls/global/config/null_label (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_null_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_null_label() directly.

    YANG Description: The null-label type used, implicit or explicit
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), default=six.text_type("oc-mplst:IMPLICIT"), is_leaf=True, yang_name="null-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """null_label must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), default=six.text_type("oc-mplst:IMPLICIT"), is_leaf=True, yang_name="null-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)""",
        })

    self.__null_label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_null_label(self):
    self.__null_label = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), default=six.text_type("oc-mplst:IMPLICIT"), is_leaf=True, yang_name="null-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)


  def _get_ttl_propagation(self):
    """
    Getter method for ttl_propagation, mapped from YANG variable /network_instances/network_instance/mpls/global/config/ttl_propagation (boolean)

    YANG Description: Enables TTL propagation across the MPLS domain.
When ttl-propagation is set to true, the IP TTL
is copied into the MPLS header TTL when pushing
a label to an IP packet. If false, the IP TTL is
not copied into the MPLS header TTL and, therefore,
the IP TTL is not updated in the MPLS domain.
    """
    return self.__ttl_propagation
      
  def _set_ttl_propagation(self, v, load=False):
    """
    Setter method for ttl_propagation, mapped from YANG variable /network_instances/network_instance/mpls/global/config/ttl_propagation (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ttl_propagation is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ttl_propagation() directly.

    YANG Description: Enables TTL propagation across the MPLS domain.
When ttl-propagation is set to true, the IP TTL
is copied into the MPLS header TTL when pushing
a label to an IP packet. If false, the IP TTL is
not copied into the MPLS header TTL and, therefore,
the IP TTL is not updated in the MPLS domain.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="ttl-propagation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ttl_propagation must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="ttl-propagation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)""",
        })

    self.__ttl_propagation = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ttl_propagation(self):
    self.__ttl_propagation = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="ttl-propagation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)


  def _get_pw_encapsulation(self):
    """
    Getter method for pw_encapsulation, mapped from YANG variable /network_instances/network_instance/mpls/global/config/pw_encapsulation (identityref)

    YANG Description: The PDU type to use with pseudowires.
    """
    return self.__pw_encapsulation
      
  def _set_pw_encapsulation(self, v, load=False):
    """
    Setter method for pw_encapsulation, mapped from YANG variable /network_instances/network_instance/mpls/global/config/pw_encapsulation (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pw_encapsulation is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pw_encapsulation() directly.

    YANG Description: The PDU type to use with pseudowires.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), is_leaf=True, yang_name="pw-encapsulation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pw_encapsulation must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), is_leaf=True, yang_name="pw-encapsulation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)""",
        })

    self.__pw_encapsulation = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pw_encapsulation(self):
    self.__pw_encapsulation = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), is_leaf=True, yang_name="pw-encapsulation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)

  null_label = __builtin__.property(_get_null_label, _set_null_label)
  ttl_propagation = __builtin__.property(_get_ttl_propagation, _set_ttl_propagation)
  pw_encapsulation = __builtin__.property(_get_pw_encapsulation, _set_pw_encapsulation)


  _pyangbind_elements = OrderedDict([('null_label', null_label), ('ttl_propagation', ttl_propagation), ('pw_encapsulation', pw_encapsulation), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/mpls/global/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top level global MPLS configuration
  """
  __slots__ = ('_path_helper', '_extmethods', '__null_label','__ttl_propagation','__pw_encapsulation',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__null_label = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), default=six.text_type("oc-mplst:IMPLICIT"), is_leaf=True, yang_name="null-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    self.__ttl_propagation = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="ttl-propagation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)
    self.__pw_encapsulation = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), is_leaf=True, yang_name="pw-encapsulation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'mpls', 'global', 'config']

  def _get_null_label(self):
    """
    Getter method for null_label, mapped from YANG variable /network_instances/network_instance/mpls/global/config/null_label (identityref)

    YANG Description: The null-label type used, implicit or explicit
    """
    return self.__null_label
      
  def _set_null_label(self, v, load=False):
    """
    Setter method for null_label, mapped from YANG variable /network_instances/network_instance/mpls/global/config/null_label (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_null_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_null_label() directly.

    YANG Description: The null-label type used, implicit or explicit
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), default=six.text_type("oc-mplst:IMPLICIT"), is_leaf=True, yang_name="null-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """null_label must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), default=six.text_type("oc-mplst:IMPLICIT"), is_leaf=True, yang_name="null-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)""",
        })

    self.__null_label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_null_label(self):
    self.__null_label = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), default=six.text_type("oc-mplst:IMPLICIT"), is_leaf=True, yang_name="null-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)


  def _get_ttl_propagation(self):
    """
    Getter method for ttl_propagation, mapped from YANG variable /network_instances/network_instance/mpls/global/config/ttl_propagation (boolean)

    YANG Description: Enables TTL propagation across the MPLS domain.
When ttl-propagation is set to true, the IP TTL
is copied into the MPLS header TTL when pushing
a label to an IP packet. If false, the IP TTL is
not copied into the MPLS header TTL and, therefore,
the IP TTL is not updated in the MPLS domain.
    """
    return self.__ttl_propagation
      
  def _set_ttl_propagation(self, v, load=False):
    """
    Setter method for ttl_propagation, mapped from YANG variable /network_instances/network_instance/mpls/global/config/ttl_propagation (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ttl_propagation is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ttl_propagation() directly.

    YANG Description: Enables TTL propagation across the MPLS domain.
When ttl-propagation is set to true, the IP TTL
is copied into the MPLS header TTL when pushing
a label to an IP packet. If false, the IP TTL is
not copied into the MPLS header TTL and, therefore,
the IP TTL is not updated in the MPLS domain.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="ttl-propagation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ttl_propagation must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="ttl-propagation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)""",
        })

    self.__ttl_propagation = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ttl_propagation(self):
    self.__ttl_propagation = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="ttl-propagation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)


  def _get_pw_encapsulation(self):
    """
    Getter method for pw_encapsulation, mapped from YANG variable /network_instances/network_instance/mpls/global/config/pw_encapsulation (identityref)

    YANG Description: The PDU type to use with pseudowires.
    """
    return self.__pw_encapsulation
      
  def _set_pw_encapsulation(self, v, load=False):
    """
    Setter method for pw_encapsulation, mapped from YANG variable /network_instances/network_instance/mpls/global/config/pw_encapsulation (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pw_encapsulation is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pw_encapsulation() directly.

    YANG Description: The PDU type to use with pseudowires.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), is_leaf=True, yang_name="pw-encapsulation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pw_encapsulation must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), is_leaf=True, yang_name="pw-encapsulation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)""",
        })

    self.__pw_encapsulation = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pw_encapsulation(self):
    self.__pw_encapsulation = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), is_leaf=True, yang_name="pw-encapsulation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)

  null_label = __builtin__.property(_get_null_label, _set_null_label)
  ttl_propagation = __builtin__.property(_get_ttl_propagation, _set_ttl_propagation)
  pw_encapsulation = __builtin__.property(_get_pw_encapsulation, _set_pw_encapsulation)


  _pyangbind_elements = OrderedDict([('null_label', null_label), ('ttl_propagation', ttl_propagation), ('pw_encapsulation', pw_encapsulation), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/mpls/global/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top level global MPLS configuration
  """
  __slots__ = ('_path_helper', '_extmethods', '__null_label','__ttl_propagation','__pw_encapsulation',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__null_label = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), default=six.text_type("oc-mplst:IMPLICIT"), is_leaf=True, yang_name="null-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    self.__ttl_propagation = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="ttl-propagation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)
    self.__pw_encapsulation = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), is_leaf=True, yang_name="pw-encapsulation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'mpls', 'global', 'config']

  def _get_null_label(self):
    """
    Getter method for null_label, mapped from YANG variable /network_instances/network_instance/mpls/global/config/null_label (identityref)

    YANG Description: The null-label type used, implicit or explicit
    """
    return self.__null_label
      
  def _set_null_label(self, v, load=False):
    """
    Setter method for null_label, mapped from YANG variable /network_instances/network_instance/mpls/global/config/null_label (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_null_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_null_label() directly.

    YANG Description: The null-label type used, implicit or explicit
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), default=six.text_type("oc-mplst:IMPLICIT"), is_leaf=True, yang_name="null-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """null_label must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), default=six.text_type("oc-mplst:IMPLICIT"), is_leaf=True, yang_name="null-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)""",
        })

    self.__null_label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_null_label(self):
    self.__null_label = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), default=six.text_type("oc-mplst:IMPLICIT"), is_leaf=True, yang_name="null-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)


  def _get_ttl_propagation(self):
    """
    Getter method for ttl_propagation, mapped from YANG variable /network_instances/network_instance/mpls/global/config/ttl_propagation (boolean)

    YANG Description: Enables TTL propagation across the MPLS domain.
When ttl-propagation is set to true, the IP TTL
is copied into the MPLS header TTL when pushing
a label to an IP packet. If false, the IP TTL is
not copied into the MPLS header TTL and, therefore,
the IP TTL is not updated in the MPLS domain.
    """
    return self.__ttl_propagation
      
  def _set_ttl_propagation(self, v, load=False):
    """
    Setter method for ttl_propagation, mapped from YANG variable /network_instances/network_instance/mpls/global/config/ttl_propagation (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ttl_propagation is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ttl_propagation() directly.

    YANG Description: Enables TTL propagation across the MPLS domain.
When ttl-propagation is set to true, the IP TTL
is copied into the MPLS header TTL when pushing
a label to an IP packet. If false, the IP TTL is
not copied into the MPLS header TTL and, therefore,
the IP TTL is not updated in the MPLS domain.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="ttl-propagation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ttl_propagation must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="ttl-propagation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)""",
        })

    self.__ttl_propagation = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ttl_propagation(self):
    self.__ttl_propagation = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="ttl-propagation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)


  def _get_pw_encapsulation(self):
    """
    Getter method for pw_encapsulation, mapped from YANG variable /network_instances/network_instance/mpls/global/config/pw_encapsulation (identityref)

    YANG Description: The PDU type to use with pseudowires.
    """
    return self.__pw_encapsulation
      
  def _set_pw_encapsulation(self, v, load=False):
    """
    Setter method for pw_encapsulation, mapped from YANG variable /network_instances/network_instance/mpls/global/config/pw_encapsulation (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pw_encapsulation is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pw_encapsulation() directly.

    YANG Description: The PDU type to use with pseudowires.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), is_leaf=True, yang_name="pw-encapsulation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pw_encapsulation must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), is_leaf=True, yang_name="pw-encapsulation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)""",
        })

    self.__pw_encapsulation = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pw_encapsulation(self):
    self.__pw_encapsulation = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), is_leaf=True, yang_name="pw-encapsulation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)

  null_label = __builtin__.property(_get_null_label, _set_null_label)
  ttl_propagation = __builtin__.property(_get_ttl_propagation, _set_ttl_propagation)
  pw_encapsulation = __builtin__.property(_get_pw_encapsulation, _set_pw_encapsulation)


  _pyangbind_elements = OrderedDict([('null_label', null_label), ('ttl_propagation', ttl_propagation), ('pw_encapsulation', pw_encapsulation), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/mpls/global/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Top level global MPLS configuration
  """
  __slots__ = ('_path_helper', '_extmethods', '__null_label','__ttl_propagation','__pw_encapsulation',)

  _yang_name = 'config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__null_label = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), default=six.text_type("oc-mplst:IMPLICIT"), is_leaf=True, yang_name="null-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    self.__ttl_propagation = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="ttl-propagation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)
    self.__pw_encapsulation = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), is_leaf=True, yang_name="pw-encapsulation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'mpls', 'global', 'config']

  def _get_null_label(self):
    """
    Getter method for null_label, mapped from YANG variable /network_instances/network_instance/mpls/global/config/null_label (identityref)

    YANG Description: The null-label type used, implicit or explicit
    """
    return self.__null_label
      
  def _set_null_label(self, v, load=False):
    """
    Setter method for null_label, mapped from YANG variable /network_instances/network_instance/mpls/global/config/null_label (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_null_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_null_label() directly.

    YANG Description: The null-label type used, implicit or explicit
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), default=six.text_type("oc-mplst:IMPLICIT"), is_leaf=True, yang_name="null-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """null_label must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), default=six.text_type("oc-mplst:IMPLICIT"), is_leaf=True, yang_name="null-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)""",
        })

    self.__null_label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_null_label(self):
    self.__null_label = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:EXPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:IMPLICIT': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), default=six.text_type("oc-mplst:IMPLICIT"), is_leaf=True, yang_name="null-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)


  def _get_ttl_propagation(self):
    """
    Getter method for ttl_propagation, mapped from YANG variable /network_instances/network_instance/mpls/global/config/ttl_propagation (boolean)

    YANG Description: Enables TTL propagation across the MPLS domain.
When ttl-propagation is set to true, the IP TTL
is copied into the MPLS header TTL when pushing
a label to an IP packet. If false, the IP TTL is
not copied into the MPLS header TTL and, therefore,
the IP TTL is not updated in the MPLS domain.
    """
    return self.__ttl_propagation
      
  def _set_ttl_propagation(self, v, load=False):
    """
    Setter method for ttl_propagation, mapped from YANG variable /network_instances/network_instance/mpls/global/config/ttl_propagation (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ttl_propagation is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ttl_propagation() directly.

    YANG Description: Enables TTL propagation across the MPLS domain.
When ttl-propagation is set to true, the IP TTL
is copied into the MPLS header TTL when pushing
a label to an IP packet. If false, the IP TTL is
not copied into the MPLS header TTL and, therefore,
the IP TTL is not updated in the MPLS domain.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="ttl-propagation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ttl_propagation must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="ttl-propagation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)""",
        })

    self.__ttl_propagation = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ttl_propagation(self):
    self.__ttl_propagation = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="ttl-propagation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=True)


  def _get_pw_encapsulation(self):
    """
    Getter method for pw_encapsulation, mapped from YANG variable /network_instances/network_instance/mpls/global/config/pw_encapsulation (identityref)

    YANG Description: The PDU type to use with pseudowires.
    """
    return self.__pw_encapsulation
      
  def _set_pw_encapsulation(self, v, load=False):
    """
    Setter method for pw_encapsulation, mapped from YANG variable /network_instances/network_instance/mpls/global/config/pw_encapsulation (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pw_encapsulation is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pw_encapsulation() directly.

    YANG Description: The PDU type to use with pseudowires.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), is_leaf=True, yang_name="pw-encapsulation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pw_encapsulation must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), is_leaf=True, yang_name="pw-encapsulation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)""",
        })

    self.__pw_encapsulation = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pw_encapsulation(self):
    self.__pw_encapsulation = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_TAGGED_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}, 'oc-mplst:PWE_ETHERNET_RAW_MODE': {'@module': 'openconfig-mpls-types', '@namespace': 'http://openconfig.net/yang/mpls-types'}},), is_leaf=True, yang_name="pw-encapsulation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=True)

  null_label = __builtin__.property(_get_null_label, _set_null_label)
  ttl_propagation = __builtin__.property(_get_ttl_propagation, _set_ttl_propagation)
  pw_encapsulation = __builtin__.property(_get_pw_encapsulation, _set_pw_encapsulation)


  _pyangbind_elements = OrderedDict([('null_label', null_label), ('ttl_propagation', ttl_propagation), ('pw_encapsulation', pw_encapsulation), ])


