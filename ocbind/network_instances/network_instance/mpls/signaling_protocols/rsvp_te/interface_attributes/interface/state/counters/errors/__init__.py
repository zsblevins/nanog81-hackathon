# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

class errors(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Interface specific RSVP error counters
  """
  __slots__ = ('_path_helper', '_extmethods', '__authentication_fail','__bad_checksum','__bad_packet_format','__bad_packet_length','__out_of_order','__received_nack','__transmit_failure','__transmit_queue_full','__unknown_ack','__unknown_nack',)

  _yang_name = 'errors'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__authentication_fail = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authentication-fail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__bad_checksum = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__bad_packet_format = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-format", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__bad_packet_length = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__out_of_order = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-of-order", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__received_nack = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="received-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__transmit_failure = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-failure", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__transmit_queue_full = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-queue-full", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__unknown_ack = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-ack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__unknown_nack = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'mpls', 'signaling-protocols', 'rsvp-te', 'interface-attributes', 'interface', 'state', 'counters', 'errors']

  def _get_authentication_fail(self):
    """
    Getter method for authentication_fail, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/authentication_fail (yang:counter64)

    YANG Description: The number of packets received that have failed RSVP-TE
authentication checks in the specified context.
    """
    return self.__authentication_fail
      
  def _set_authentication_fail(self, v, load=False):
    """
    Setter method for authentication_fail, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/authentication_fail (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_authentication_fail is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_authentication_fail() directly.

    YANG Description: The number of packets received that have failed RSVP-TE
authentication checks in the specified context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authentication-fail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """authentication_fail must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authentication-fail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__authentication_fail = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_authentication_fail(self):
    self.__authentication_fail = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authentication-fail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_bad_checksum(self):
    """
    Getter method for bad_checksum, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/bad_checksum (yang:counter64)

    YANG Description: The number of packets received that have an incorrect RSVP-TE
checksum in the context.
    """
    return self.__bad_checksum
      
  def _set_bad_checksum(self, v, load=False):
    """
    Setter method for bad_checksum, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/bad_checksum (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bad_checksum is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bad_checksum() directly.

    YANG Description: The number of packets received that have an incorrect RSVP-TE
checksum in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bad_checksum must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__bad_checksum = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bad_checksum(self):
    self.__bad_checksum = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_bad_packet_format(self):
    """
    Getter method for bad_packet_format, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/bad_packet_format (yang:counter64)

    YANG Description: The number of packets received that were dropped due to being
badly formed in the context.
    """
    return self.__bad_packet_format
      
  def _set_bad_packet_format(self, v, load=False):
    """
    Setter method for bad_packet_format, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/bad_packet_format (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bad_packet_format is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bad_packet_format() directly.

    YANG Description: The number of packets received that were dropped due to being
badly formed in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-format", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bad_packet_format must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-format", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__bad_packet_format = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bad_packet_format(self):
    self.__bad_packet_format = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-format", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_bad_packet_length(self):
    """
    Getter method for bad_packet_length, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/bad_packet_length (yang:counter64)

    YANG Description: The number of packets received that were dropped due to having
an invalid length specified in the context.
    """
    return self.__bad_packet_length
      
  def _set_bad_packet_length(self, v, load=False):
    """
    Setter method for bad_packet_length, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/bad_packet_length (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bad_packet_length is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bad_packet_length() directly.

    YANG Description: The number of packets received that were dropped due to having
an invalid length specified in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bad_packet_length must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__bad_packet_length = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bad_packet_length(self):
    self.__bad_packet_length = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_out_of_order(self):
    """
    Getter method for out_of_order, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/out_of_order (yang:counter64)

    YANG Description: The number of messages received out of order in the context.
    """
    return self.__out_of_order
      
  def _set_out_of_order(self, v, load=False):
    """
    Setter method for out_of_order, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/out_of_order (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_of_order is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_of_order() directly.

    YANG Description: The number of messages received out of order in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-of-order", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_of_order must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-of-order", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__out_of_order = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_of_order(self):
    self.__out_of_order = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-of-order", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_received_nack(self):
    """
    Getter method for received_nack, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/received_nack (yang:counter64)

    YANG Description: The number of NACK RESV messages received in the context.
    """
    return self.__received_nack
      
  def _set_received_nack(self, v, load=False):
    """
    Setter method for received_nack, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/received_nack (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_received_nack is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_received_nack() directly.

    YANG Description: The number of NACK RESV messages received in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="received-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """received_nack must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="received-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__received_nack = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_received_nack(self):
    self.__received_nack = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="received-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_transmit_failure(self):
    """
    Getter method for transmit_failure, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/transmit_failure (yang:counter64)

    YANG Description: The total number of packets dropped on transmit in the context.
    """
    return self.__transmit_failure
      
  def _set_transmit_failure(self, v, load=False):
    """
    Setter method for transmit_failure, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/transmit_failure (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transmit_failure is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transmit_failure() directly.

    YANG Description: The total number of packets dropped on transmit in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-failure", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transmit_failure must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-failure", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__transmit_failure = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transmit_failure(self):
    self.__transmit_failure = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-failure", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_transmit_queue_full(self):
    """
    Getter method for transmit_queue_full, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/transmit_queue_full (yang:counter64)

    YANG Description: The number of packets dropped due to the transmit queue being
full in the context.
    """
    return self.__transmit_queue_full
      
  def _set_transmit_queue_full(self, v, load=False):
    """
    Setter method for transmit_queue_full, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/transmit_queue_full (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transmit_queue_full is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transmit_queue_full() directly.

    YANG Description: The number of packets dropped due to the transmit queue being
full in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-queue-full", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transmit_queue_full must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-queue-full", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__transmit_queue_full = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transmit_queue_full(self):
    self.__transmit_queue_full = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-queue-full", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_unknown_ack(self):
    """
    Getter method for unknown_ack, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/unknown_ack (yang:counter64)

    YANG Description: The number of packets received containing an ACK for an unknown
message ID in the context.
    """
    return self.__unknown_ack
      
  def _set_unknown_ack(self, v, load=False):
    """
    Setter method for unknown_ack, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/unknown_ack (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unknown_ack is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unknown_ack() directly.

    YANG Description: The number of packets received containing an ACK for an unknown
message ID in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-ack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unknown_ack must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-ack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__unknown_ack = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unknown_ack(self):
    self.__unknown_ack = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-ack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_unknown_nack(self):
    """
    Getter method for unknown_nack, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/unknown_nack (yang:counter64)

    YANG Description: The number of packets received containing a NACK for an unknown
message ID in the context.
    """
    return self.__unknown_nack
      
  def _set_unknown_nack(self, v, load=False):
    """
    Setter method for unknown_nack, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/unknown_nack (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unknown_nack is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unknown_nack() directly.

    YANG Description: The number of packets received containing a NACK for an unknown
message ID in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unknown_nack must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__unknown_nack = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unknown_nack(self):
    self.__unknown_nack = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)

  authentication_fail = __builtin__.property(_get_authentication_fail)
  bad_checksum = __builtin__.property(_get_bad_checksum)
  bad_packet_format = __builtin__.property(_get_bad_packet_format)
  bad_packet_length = __builtin__.property(_get_bad_packet_length)
  out_of_order = __builtin__.property(_get_out_of_order)
  received_nack = __builtin__.property(_get_received_nack)
  transmit_failure = __builtin__.property(_get_transmit_failure)
  transmit_queue_full = __builtin__.property(_get_transmit_queue_full)
  unknown_ack = __builtin__.property(_get_unknown_ack)
  unknown_nack = __builtin__.property(_get_unknown_nack)


  _pyangbind_elements = OrderedDict([('authentication_fail', authentication_fail), ('bad_checksum', bad_checksum), ('bad_packet_format', bad_packet_format), ('bad_packet_length', bad_packet_length), ('out_of_order', out_of_order), ('received_nack', received_nack), ('transmit_failure', transmit_failure), ('transmit_queue_full', transmit_queue_full), ('unknown_ack', unknown_ack), ('unknown_nack', unknown_nack), ])


class errors(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Interface specific RSVP error counters
  """
  __slots__ = ('_path_helper', '_extmethods', '__authentication_fail','__bad_checksum','__bad_packet_format','__bad_packet_length','__out_of_order','__received_nack','__transmit_failure','__transmit_queue_full','__unknown_ack','__unknown_nack',)

  _yang_name = 'errors'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__authentication_fail = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authentication-fail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__bad_checksum = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__bad_packet_format = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-format", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__bad_packet_length = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__out_of_order = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-of-order", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__received_nack = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="received-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__transmit_failure = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-failure", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__transmit_queue_full = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-queue-full", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__unknown_ack = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-ack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__unknown_nack = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'mpls', 'signaling-protocols', 'rsvp-te', 'interface-attributes', 'interface', 'state', 'counters', 'errors']

  def _get_authentication_fail(self):
    """
    Getter method for authentication_fail, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/authentication_fail (yang:counter64)

    YANG Description: The number of packets received that have failed RSVP-TE
authentication checks in the specified context.
    """
    return self.__authentication_fail
      
  def _set_authentication_fail(self, v, load=False):
    """
    Setter method for authentication_fail, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/authentication_fail (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_authentication_fail is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_authentication_fail() directly.

    YANG Description: The number of packets received that have failed RSVP-TE
authentication checks in the specified context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authentication-fail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """authentication_fail must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authentication-fail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__authentication_fail = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_authentication_fail(self):
    self.__authentication_fail = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authentication-fail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_bad_checksum(self):
    """
    Getter method for bad_checksum, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/bad_checksum (yang:counter64)

    YANG Description: The number of packets received that have an incorrect RSVP-TE
checksum in the context.
    """
    return self.__bad_checksum
      
  def _set_bad_checksum(self, v, load=False):
    """
    Setter method for bad_checksum, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/bad_checksum (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bad_checksum is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bad_checksum() directly.

    YANG Description: The number of packets received that have an incorrect RSVP-TE
checksum in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bad_checksum must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__bad_checksum = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bad_checksum(self):
    self.__bad_checksum = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_bad_packet_format(self):
    """
    Getter method for bad_packet_format, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/bad_packet_format (yang:counter64)

    YANG Description: The number of packets received that were dropped due to being
badly formed in the context.
    """
    return self.__bad_packet_format
      
  def _set_bad_packet_format(self, v, load=False):
    """
    Setter method for bad_packet_format, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/bad_packet_format (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bad_packet_format is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bad_packet_format() directly.

    YANG Description: The number of packets received that were dropped due to being
badly formed in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-format", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bad_packet_format must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-format", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__bad_packet_format = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bad_packet_format(self):
    self.__bad_packet_format = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-format", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_bad_packet_length(self):
    """
    Getter method for bad_packet_length, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/bad_packet_length (yang:counter64)

    YANG Description: The number of packets received that were dropped due to having
an invalid length specified in the context.
    """
    return self.__bad_packet_length
      
  def _set_bad_packet_length(self, v, load=False):
    """
    Setter method for bad_packet_length, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/bad_packet_length (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bad_packet_length is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bad_packet_length() directly.

    YANG Description: The number of packets received that were dropped due to having
an invalid length specified in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bad_packet_length must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__bad_packet_length = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bad_packet_length(self):
    self.__bad_packet_length = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_out_of_order(self):
    """
    Getter method for out_of_order, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/out_of_order (yang:counter64)

    YANG Description: The number of messages received out of order in the context.
    """
    return self.__out_of_order
      
  def _set_out_of_order(self, v, load=False):
    """
    Setter method for out_of_order, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/out_of_order (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_of_order is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_of_order() directly.

    YANG Description: The number of messages received out of order in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-of-order", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_of_order must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-of-order", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__out_of_order = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_of_order(self):
    self.__out_of_order = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-of-order", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_received_nack(self):
    """
    Getter method for received_nack, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/received_nack (yang:counter64)

    YANG Description: The number of NACK RESV messages received in the context.
    """
    return self.__received_nack
      
  def _set_received_nack(self, v, load=False):
    """
    Setter method for received_nack, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/received_nack (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_received_nack is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_received_nack() directly.

    YANG Description: The number of NACK RESV messages received in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="received-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """received_nack must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="received-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__received_nack = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_received_nack(self):
    self.__received_nack = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="received-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_transmit_failure(self):
    """
    Getter method for transmit_failure, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/transmit_failure (yang:counter64)

    YANG Description: The total number of packets dropped on transmit in the context.
    """
    return self.__transmit_failure
      
  def _set_transmit_failure(self, v, load=False):
    """
    Setter method for transmit_failure, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/transmit_failure (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transmit_failure is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transmit_failure() directly.

    YANG Description: The total number of packets dropped on transmit in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-failure", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transmit_failure must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-failure", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__transmit_failure = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transmit_failure(self):
    self.__transmit_failure = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-failure", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_transmit_queue_full(self):
    """
    Getter method for transmit_queue_full, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/transmit_queue_full (yang:counter64)

    YANG Description: The number of packets dropped due to the transmit queue being
full in the context.
    """
    return self.__transmit_queue_full
      
  def _set_transmit_queue_full(self, v, load=False):
    """
    Setter method for transmit_queue_full, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/transmit_queue_full (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transmit_queue_full is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transmit_queue_full() directly.

    YANG Description: The number of packets dropped due to the transmit queue being
full in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-queue-full", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transmit_queue_full must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-queue-full", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__transmit_queue_full = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transmit_queue_full(self):
    self.__transmit_queue_full = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-queue-full", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_unknown_ack(self):
    """
    Getter method for unknown_ack, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/unknown_ack (yang:counter64)

    YANG Description: The number of packets received containing an ACK for an unknown
message ID in the context.
    """
    return self.__unknown_ack
      
  def _set_unknown_ack(self, v, load=False):
    """
    Setter method for unknown_ack, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/unknown_ack (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unknown_ack is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unknown_ack() directly.

    YANG Description: The number of packets received containing an ACK for an unknown
message ID in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-ack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unknown_ack must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-ack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__unknown_ack = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unknown_ack(self):
    self.__unknown_ack = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-ack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_unknown_nack(self):
    """
    Getter method for unknown_nack, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/unknown_nack (yang:counter64)

    YANG Description: The number of packets received containing a NACK for an unknown
message ID in the context.
    """
    return self.__unknown_nack
      
  def _set_unknown_nack(self, v, load=False):
    """
    Setter method for unknown_nack, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/unknown_nack (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unknown_nack is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unknown_nack() directly.

    YANG Description: The number of packets received containing a NACK for an unknown
message ID in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unknown_nack must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__unknown_nack = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unknown_nack(self):
    self.__unknown_nack = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)

  authentication_fail = __builtin__.property(_get_authentication_fail)
  bad_checksum = __builtin__.property(_get_bad_checksum)
  bad_packet_format = __builtin__.property(_get_bad_packet_format)
  bad_packet_length = __builtin__.property(_get_bad_packet_length)
  out_of_order = __builtin__.property(_get_out_of_order)
  received_nack = __builtin__.property(_get_received_nack)
  transmit_failure = __builtin__.property(_get_transmit_failure)
  transmit_queue_full = __builtin__.property(_get_transmit_queue_full)
  unknown_ack = __builtin__.property(_get_unknown_ack)
  unknown_nack = __builtin__.property(_get_unknown_nack)


  _pyangbind_elements = OrderedDict([('authentication_fail', authentication_fail), ('bad_checksum', bad_checksum), ('bad_packet_format', bad_packet_format), ('bad_packet_length', bad_packet_length), ('out_of_order', out_of_order), ('received_nack', received_nack), ('transmit_failure', transmit_failure), ('transmit_queue_full', transmit_queue_full), ('unknown_ack', unknown_ack), ('unknown_nack', unknown_nack), ])


class errors(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Interface specific RSVP error counters
  """
  __slots__ = ('_path_helper', '_extmethods', '__authentication_fail','__bad_checksum','__bad_packet_format','__bad_packet_length','__out_of_order','__received_nack','__transmit_failure','__transmit_queue_full','__unknown_ack','__unknown_nack',)

  _yang_name = 'errors'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__authentication_fail = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authentication-fail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__bad_checksum = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__bad_packet_format = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-format", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__bad_packet_length = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__out_of_order = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-of-order", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__received_nack = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="received-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__transmit_failure = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-failure", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__transmit_queue_full = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-queue-full", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__unknown_ack = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-ack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__unknown_nack = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'mpls', 'signaling-protocols', 'rsvp-te', 'interface-attributes', 'interface', 'state', 'counters', 'errors']

  def _get_authentication_fail(self):
    """
    Getter method for authentication_fail, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/authentication_fail (yang:counter64)

    YANG Description: The number of packets received that have failed RSVP-TE
authentication checks in the specified context.
    """
    return self.__authentication_fail
      
  def _set_authentication_fail(self, v, load=False):
    """
    Setter method for authentication_fail, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/authentication_fail (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_authentication_fail is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_authentication_fail() directly.

    YANG Description: The number of packets received that have failed RSVP-TE
authentication checks in the specified context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authentication-fail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """authentication_fail must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authentication-fail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__authentication_fail = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_authentication_fail(self):
    self.__authentication_fail = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authentication-fail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_bad_checksum(self):
    """
    Getter method for bad_checksum, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/bad_checksum (yang:counter64)

    YANG Description: The number of packets received that have an incorrect RSVP-TE
checksum in the context.
    """
    return self.__bad_checksum
      
  def _set_bad_checksum(self, v, load=False):
    """
    Setter method for bad_checksum, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/bad_checksum (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bad_checksum is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bad_checksum() directly.

    YANG Description: The number of packets received that have an incorrect RSVP-TE
checksum in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bad_checksum must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__bad_checksum = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bad_checksum(self):
    self.__bad_checksum = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_bad_packet_format(self):
    """
    Getter method for bad_packet_format, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/bad_packet_format (yang:counter64)

    YANG Description: The number of packets received that were dropped due to being
badly formed in the context.
    """
    return self.__bad_packet_format
      
  def _set_bad_packet_format(self, v, load=False):
    """
    Setter method for bad_packet_format, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/bad_packet_format (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bad_packet_format is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bad_packet_format() directly.

    YANG Description: The number of packets received that were dropped due to being
badly formed in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-format", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bad_packet_format must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-format", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__bad_packet_format = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bad_packet_format(self):
    self.__bad_packet_format = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-format", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_bad_packet_length(self):
    """
    Getter method for bad_packet_length, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/bad_packet_length (yang:counter64)

    YANG Description: The number of packets received that were dropped due to having
an invalid length specified in the context.
    """
    return self.__bad_packet_length
      
  def _set_bad_packet_length(self, v, load=False):
    """
    Setter method for bad_packet_length, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/bad_packet_length (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bad_packet_length is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bad_packet_length() directly.

    YANG Description: The number of packets received that were dropped due to having
an invalid length specified in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bad_packet_length must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__bad_packet_length = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bad_packet_length(self):
    self.__bad_packet_length = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_out_of_order(self):
    """
    Getter method for out_of_order, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/out_of_order (yang:counter64)

    YANG Description: The number of messages received out of order in the context.
    """
    return self.__out_of_order
      
  def _set_out_of_order(self, v, load=False):
    """
    Setter method for out_of_order, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/out_of_order (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_of_order is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_of_order() directly.

    YANG Description: The number of messages received out of order in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-of-order", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_of_order must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-of-order", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__out_of_order = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_of_order(self):
    self.__out_of_order = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-of-order", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_received_nack(self):
    """
    Getter method for received_nack, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/received_nack (yang:counter64)

    YANG Description: The number of NACK RESV messages received in the context.
    """
    return self.__received_nack
      
  def _set_received_nack(self, v, load=False):
    """
    Setter method for received_nack, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/received_nack (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_received_nack is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_received_nack() directly.

    YANG Description: The number of NACK RESV messages received in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="received-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """received_nack must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="received-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__received_nack = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_received_nack(self):
    self.__received_nack = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="received-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_transmit_failure(self):
    """
    Getter method for transmit_failure, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/transmit_failure (yang:counter64)

    YANG Description: The total number of packets dropped on transmit in the context.
    """
    return self.__transmit_failure
      
  def _set_transmit_failure(self, v, load=False):
    """
    Setter method for transmit_failure, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/transmit_failure (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transmit_failure is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transmit_failure() directly.

    YANG Description: The total number of packets dropped on transmit in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-failure", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transmit_failure must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-failure", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__transmit_failure = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transmit_failure(self):
    self.__transmit_failure = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-failure", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_transmit_queue_full(self):
    """
    Getter method for transmit_queue_full, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/transmit_queue_full (yang:counter64)

    YANG Description: The number of packets dropped due to the transmit queue being
full in the context.
    """
    return self.__transmit_queue_full
      
  def _set_transmit_queue_full(self, v, load=False):
    """
    Setter method for transmit_queue_full, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/transmit_queue_full (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transmit_queue_full is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transmit_queue_full() directly.

    YANG Description: The number of packets dropped due to the transmit queue being
full in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-queue-full", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transmit_queue_full must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-queue-full", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__transmit_queue_full = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transmit_queue_full(self):
    self.__transmit_queue_full = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-queue-full", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_unknown_ack(self):
    """
    Getter method for unknown_ack, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/unknown_ack (yang:counter64)

    YANG Description: The number of packets received containing an ACK for an unknown
message ID in the context.
    """
    return self.__unknown_ack
      
  def _set_unknown_ack(self, v, load=False):
    """
    Setter method for unknown_ack, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/unknown_ack (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unknown_ack is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unknown_ack() directly.

    YANG Description: The number of packets received containing an ACK for an unknown
message ID in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-ack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unknown_ack must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-ack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__unknown_ack = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unknown_ack(self):
    self.__unknown_ack = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-ack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_unknown_nack(self):
    """
    Getter method for unknown_nack, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/unknown_nack (yang:counter64)

    YANG Description: The number of packets received containing a NACK for an unknown
message ID in the context.
    """
    return self.__unknown_nack
      
  def _set_unknown_nack(self, v, load=False):
    """
    Setter method for unknown_nack, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/unknown_nack (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unknown_nack is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unknown_nack() directly.

    YANG Description: The number of packets received containing a NACK for an unknown
message ID in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unknown_nack must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__unknown_nack = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unknown_nack(self):
    self.__unknown_nack = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)

  authentication_fail = __builtin__.property(_get_authentication_fail)
  bad_checksum = __builtin__.property(_get_bad_checksum)
  bad_packet_format = __builtin__.property(_get_bad_packet_format)
  bad_packet_length = __builtin__.property(_get_bad_packet_length)
  out_of_order = __builtin__.property(_get_out_of_order)
  received_nack = __builtin__.property(_get_received_nack)
  transmit_failure = __builtin__.property(_get_transmit_failure)
  transmit_queue_full = __builtin__.property(_get_transmit_queue_full)
  unknown_ack = __builtin__.property(_get_unknown_ack)
  unknown_nack = __builtin__.property(_get_unknown_nack)


  _pyangbind_elements = OrderedDict([('authentication_fail', authentication_fail), ('bad_checksum', bad_checksum), ('bad_packet_format', bad_packet_format), ('bad_packet_length', bad_packet_length), ('out_of_order', out_of_order), ('received_nack', received_nack), ('transmit_failure', transmit_failure), ('transmit_queue_full', transmit_queue_full), ('unknown_ack', unknown_ack), ('unknown_nack', unknown_nack), ])


class errors(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Interface specific RSVP error counters
  """
  __slots__ = ('_path_helper', '_extmethods', '__authentication_fail','__bad_checksum','__bad_packet_format','__bad_packet_length','__out_of_order','__received_nack','__transmit_failure','__transmit_queue_full','__unknown_ack','__unknown_nack',)

  _yang_name = 'errors'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__authentication_fail = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authentication-fail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__bad_checksum = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__bad_packet_format = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-format", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__bad_packet_length = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__out_of_order = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-of-order", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__received_nack = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="received-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__transmit_failure = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-failure", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__transmit_queue_full = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-queue-full", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__unknown_ack = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-ack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    self.__unknown_nack = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'mpls', 'signaling-protocols', 'rsvp-te', 'interface-attributes', 'interface', 'state', 'counters', 'errors']

  def _get_authentication_fail(self):
    """
    Getter method for authentication_fail, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/authentication_fail (yang:counter64)

    YANG Description: The number of packets received that have failed RSVP-TE
authentication checks in the specified context.
    """
    return self.__authentication_fail
      
  def _set_authentication_fail(self, v, load=False):
    """
    Setter method for authentication_fail, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/authentication_fail (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_authentication_fail is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_authentication_fail() directly.

    YANG Description: The number of packets received that have failed RSVP-TE
authentication checks in the specified context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authentication-fail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """authentication_fail must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authentication-fail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__authentication_fail = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_authentication_fail(self):
    self.__authentication_fail = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="authentication-fail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_bad_checksum(self):
    """
    Getter method for bad_checksum, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/bad_checksum (yang:counter64)

    YANG Description: The number of packets received that have an incorrect RSVP-TE
checksum in the context.
    """
    return self.__bad_checksum
      
  def _set_bad_checksum(self, v, load=False):
    """
    Setter method for bad_checksum, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/bad_checksum (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bad_checksum is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bad_checksum() directly.

    YANG Description: The number of packets received that have an incorrect RSVP-TE
checksum in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bad_checksum must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__bad_checksum = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bad_checksum(self):
    self.__bad_checksum = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_bad_packet_format(self):
    """
    Getter method for bad_packet_format, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/bad_packet_format (yang:counter64)

    YANG Description: The number of packets received that were dropped due to being
badly formed in the context.
    """
    return self.__bad_packet_format
      
  def _set_bad_packet_format(self, v, load=False):
    """
    Setter method for bad_packet_format, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/bad_packet_format (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bad_packet_format is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bad_packet_format() directly.

    YANG Description: The number of packets received that were dropped due to being
badly formed in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-format", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bad_packet_format must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-format", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__bad_packet_format = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bad_packet_format(self):
    self.__bad_packet_format = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-format", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_bad_packet_length(self):
    """
    Getter method for bad_packet_length, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/bad_packet_length (yang:counter64)

    YANG Description: The number of packets received that were dropped due to having
an invalid length specified in the context.
    """
    return self.__bad_packet_length
      
  def _set_bad_packet_length(self, v, load=False):
    """
    Setter method for bad_packet_length, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/bad_packet_length (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bad_packet_length is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bad_packet_length() directly.

    YANG Description: The number of packets received that were dropped due to having
an invalid length specified in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bad_packet_length must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__bad_packet_length = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bad_packet_length(self):
    self.__bad_packet_length = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bad-packet-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_out_of_order(self):
    """
    Getter method for out_of_order, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/out_of_order (yang:counter64)

    YANG Description: The number of messages received out of order in the context.
    """
    return self.__out_of_order
      
  def _set_out_of_order(self, v, load=False):
    """
    Setter method for out_of_order, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/out_of_order (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_of_order is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_of_order() directly.

    YANG Description: The number of messages received out of order in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-of-order", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_of_order must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-of-order", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__out_of_order = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_of_order(self):
    self.__out_of_order = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="out-of-order", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_received_nack(self):
    """
    Getter method for received_nack, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/received_nack (yang:counter64)

    YANG Description: The number of NACK RESV messages received in the context.
    """
    return self.__received_nack
      
  def _set_received_nack(self, v, load=False):
    """
    Setter method for received_nack, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/received_nack (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_received_nack is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_received_nack() directly.

    YANG Description: The number of NACK RESV messages received in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="received-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """received_nack must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="received-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__received_nack = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_received_nack(self):
    self.__received_nack = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="received-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_transmit_failure(self):
    """
    Getter method for transmit_failure, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/transmit_failure (yang:counter64)

    YANG Description: The total number of packets dropped on transmit in the context.
    """
    return self.__transmit_failure
      
  def _set_transmit_failure(self, v, load=False):
    """
    Setter method for transmit_failure, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/transmit_failure (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transmit_failure is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transmit_failure() directly.

    YANG Description: The total number of packets dropped on transmit in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-failure", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transmit_failure must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-failure", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__transmit_failure = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transmit_failure(self):
    self.__transmit_failure = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-failure", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_transmit_queue_full(self):
    """
    Getter method for transmit_queue_full, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/transmit_queue_full (yang:counter64)

    YANG Description: The number of packets dropped due to the transmit queue being
full in the context.
    """
    return self.__transmit_queue_full
      
  def _set_transmit_queue_full(self, v, load=False):
    """
    Setter method for transmit_queue_full, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/transmit_queue_full (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transmit_queue_full is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transmit_queue_full() directly.

    YANG Description: The number of packets dropped due to the transmit queue being
full in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-queue-full", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transmit_queue_full must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-queue-full", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__transmit_queue_full = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transmit_queue_full(self):
    self.__transmit_queue_full = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="transmit-queue-full", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_unknown_ack(self):
    """
    Getter method for unknown_ack, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/unknown_ack (yang:counter64)

    YANG Description: The number of packets received containing an ACK for an unknown
message ID in the context.
    """
    return self.__unknown_ack
      
  def _set_unknown_ack(self, v, load=False):
    """
    Setter method for unknown_ack, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/unknown_ack (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unknown_ack is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unknown_ack() directly.

    YANG Description: The number of packets received containing an ACK for an unknown
message ID in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-ack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unknown_ack must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-ack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__unknown_ack = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unknown_ack(self):
    self.__unknown_ack = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-ack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)


  def _get_unknown_nack(self):
    """
    Getter method for unknown_nack, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/unknown_nack (yang:counter64)

    YANG Description: The number of packets received containing a NACK for an unknown
message ID in the context.
    """
    return self.__unknown_nack
      
  def _set_unknown_nack(self, v, load=False):
    """
    Setter method for unknown_nack, mapped from YANG variable /network_instances/network_instance/mpls/signaling_protocols/rsvp_te/interface_attributes/interface/state/counters/errors/unknown_nack (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unknown_nack is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unknown_nack() directly.

    YANG Description: The number of packets received containing a NACK for an unknown
message ID in the context.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unknown_nack must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)""",
        })

    self.__unknown_nack = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unknown_nack(self):
    self.__unknown_nack = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-nack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='yang:counter64', is_config=False)

  authentication_fail = __builtin__.property(_get_authentication_fail)
  bad_checksum = __builtin__.property(_get_bad_checksum)
  bad_packet_format = __builtin__.property(_get_bad_packet_format)
  bad_packet_length = __builtin__.property(_get_bad_packet_length)
  out_of_order = __builtin__.property(_get_out_of_order)
  received_nack = __builtin__.property(_get_received_nack)
  transmit_failure = __builtin__.property(_get_transmit_failure)
  transmit_queue_full = __builtin__.property(_get_transmit_queue_full)
  unknown_ack = __builtin__.property(_get_unknown_ack)
  unknown_nack = __builtin__.property(_get_unknown_nack)


  _pyangbind_elements = OrderedDict([('authentication_fail', authentication_fail), ('bad_checksum', bad_checksum), ('bad_packet_format', bad_packet_format), ('bad_packet_length', bad_packet_length), ('out_of_order', out_of_order), ('received_nack', received_nack), ('transmit_failure', transmit_failure), ('transmit_queue_full', transmit_queue_full), ('unknown_ack', unknown_ack), ('unknown_nack', unknown_nack), ])


