# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

from . import ssm
from . import rendezvous_points
from . import state
from . import sources_joined
class global_(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/protocols/protocol/pim/global. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This container defines global PIM configuration and state
information.
  """
  __slots__ = ('_path_helper', '_extmethods', '__ssm','__rendezvous_points','__state','__sources_joined',)

  _yang_name = 'global'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__ssm = YANGDynClass(base=ssm.ssm, is_container='container', yang_name="ssm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__rendezvous_points = YANGDynClass(base=rendezvous_points.rendezvous_points, is_container='container', yang_name="rendezvous-points", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__sources_joined = YANGDynClass(base=sources_joined.sources_joined, is_container='container', yang_name="sources-joined", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'pim', 'global']

  def _get_ssm(self):
    """
    Getter method for ssm, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/ssm (container)

    YANG Description: Source specific multicast (SSM).
    """
    return self.__ssm
      
  def _set_ssm(self, v, load=False):
    """
    Setter method for ssm, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/ssm (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ssm is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ssm() directly.

    YANG Description: Source specific multicast (SSM).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ssm.ssm, is_container='container', yang_name="ssm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ssm must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ssm.ssm, is_container='container', yang_name="ssm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__ssm = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ssm(self):
    self.__ssm = YANGDynClass(base=ssm.ssm, is_container='container', yang_name="ssm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_rendezvous_points(self):
    """
    Getter method for rendezvous_points, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/rendezvous_points (container)

    YANG Description: Defines rendezvous points for sparse mode multicast.
    """
    return self.__rendezvous_points
      
  def _set_rendezvous_points(self, v, load=False):
    """
    Setter method for rendezvous_points, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/rendezvous_points (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rendezvous_points is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rendezvous_points() directly.

    YANG Description: Defines rendezvous points for sparse mode multicast.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=rendezvous_points.rendezvous_points, is_container='container', yang_name="rendezvous-points", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rendezvous_points must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=rendezvous_points.rendezvous_points, is_container='container', yang_name="rendezvous-points", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__rendezvous_points = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rendezvous_points(self):
    self.__rendezvous_points = YANGDynClass(base=rendezvous_points.rendezvous_points, is_container='container', yang_name="rendezvous-points", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state (container)

    YANG Description: Global PIM state.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Global PIM state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_sources_joined(self):
    """
    Getter method for sources_joined, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/sources_joined (container)

    YANG Description: List of multicast sources joined.
    """
    return self.__sources_joined
      
  def _set_sources_joined(self, v, load=False):
    """
    Setter method for sources_joined, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/sources_joined (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sources_joined is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sources_joined() directly.

    YANG Description: List of multicast sources joined.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=sources_joined.sources_joined, is_container='container', yang_name="sources-joined", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sources_joined must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=sources_joined.sources_joined, is_container='container', yang_name="sources-joined", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__sources_joined = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sources_joined(self):
    self.__sources_joined = YANGDynClass(base=sources_joined.sources_joined, is_container='container', yang_name="sources-joined", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)

  ssm = __builtin__.property(_get_ssm, _set_ssm)
  rendezvous_points = __builtin__.property(_get_rendezvous_points, _set_rendezvous_points)
  state = __builtin__.property(_get_state, _set_state)
  sources_joined = __builtin__.property(_get_sources_joined, _set_sources_joined)


  _pyangbind_elements = OrderedDict([('ssm', ssm), ('rendezvous_points', rendezvous_points), ('state', state), ('sources_joined', sources_joined), ])


from . import ssm
from . import rendezvous_points
from . import state
from . import sources_joined
class global_(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/protocols/protocol/pim/global. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This container defines global PIM configuration and state
information.
  """
  __slots__ = ('_path_helper', '_extmethods', '__ssm','__rendezvous_points','__state','__sources_joined',)

  _yang_name = 'global'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__ssm = YANGDynClass(base=ssm.ssm, is_container='container', yang_name="ssm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__rendezvous_points = YANGDynClass(base=rendezvous_points.rendezvous_points, is_container='container', yang_name="rendezvous-points", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__sources_joined = YANGDynClass(base=sources_joined.sources_joined, is_container='container', yang_name="sources-joined", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'pim', 'global']

  def _get_ssm(self):
    """
    Getter method for ssm, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/ssm (container)

    YANG Description: Source specific multicast (SSM).
    """
    return self.__ssm
      
  def _set_ssm(self, v, load=False):
    """
    Setter method for ssm, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/ssm (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ssm is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ssm() directly.

    YANG Description: Source specific multicast (SSM).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ssm.ssm, is_container='container', yang_name="ssm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ssm must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ssm.ssm, is_container='container', yang_name="ssm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__ssm = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ssm(self):
    self.__ssm = YANGDynClass(base=ssm.ssm, is_container='container', yang_name="ssm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_rendezvous_points(self):
    """
    Getter method for rendezvous_points, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/rendezvous_points (container)

    YANG Description: Defines rendezvous points for sparse mode multicast.
    """
    return self.__rendezvous_points
      
  def _set_rendezvous_points(self, v, load=False):
    """
    Setter method for rendezvous_points, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/rendezvous_points (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rendezvous_points is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rendezvous_points() directly.

    YANG Description: Defines rendezvous points for sparse mode multicast.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=rendezvous_points.rendezvous_points, is_container='container', yang_name="rendezvous-points", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rendezvous_points must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=rendezvous_points.rendezvous_points, is_container='container', yang_name="rendezvous-points", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__rendezvous_points = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rendezvous_points(self):
    self.__rendezvous_points = YANGDynClass(base=rendezvous_points.rendezvous_points, is_container='container', yang_name="rendezvous-points", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state (container)

    YANG Description: Global PIM state.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Global PIM state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_sources_joined(self):
    """
    Getter method for sources_joined, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/sources_joined (container)

    YANG Description: List of multicast sources joined.
    """
    return self.__sources_joined
      
  def _set_sources_joined(self, v, load=False):
    """
    Setter method for sources_joined, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/sources_joined (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sources_joined is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sources_joined() directly.

    YANG Description: List of multicast sources joined.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=sources_joined.sources_joined, is_container='container', yang_name="sources-joined", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sources_joined must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=sources_joined.sources_joined, is_container='container', yang_name="sources-joined", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__sources_joined = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sources_joined(self):
    self.__sources_joined = YANGDynClass(base=sources_joined.sources_joined, is_container='container', yang_name="sources-joined", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)

  ssm = __builtin__.property(_get_ssm, _set_ssm)
  rendezvous_points = __builtin__.property(_get_rendezvous_points, _set_rendezvous_points)
  state = __builtin__.property(_get_state, _set_state)
  sources_joined = __builtin__.property(_get_sources_joined, _set_sources_joined)


  _pyangbind_elements = OrderedDict([('ssm', ssm), ('rendezvous_points', rendezvous_points), ('state', state), ('sources_joined', sources_joined), ])


from . import ssm
from . import rendezvous_points
from . import state
from . import sources_joined
class global_(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/protocols/protocol/pim/global. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This container defines global PIM configuration and state
information.
  """
  __slots__ = ('_path_helper', '_extmethods', '__ssm','__rendezvous_points','__state','__sources_joined',)

  _yang_name = 'global'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__ssm = YANGDynClass(base=ssm.ssm, is_container='container', yang_name="ssm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__rendezvous_points = YANGDynClass(base=rendezvous_points.rendezvous_points, is_container='container', yang_name="rendezvous-points", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__sources_joined = YANGDynClass(base=sources_joined.sources_joined, is_container='container', yang_name="sources-joined", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'pim', 'global']

  def _get_ssm(self):
    """
    Getter method for ssm, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/ssm (container)

    YANG Description: Source specific multicast (SSM).
    """
    return self.__ssm
      
  def _set_ssm(self, v, load=False):
    """
    Setter method for ssm, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/ssm (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ssm is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ssm() directly.

    YANG Description: Source specific multicast (SSM).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ssm.ssm, is_container='container', yang_name="ssm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ssm must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ssm.ssm, is_container='container', yang_name="ssm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__ssm = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ssm(self):
    self.__ssm = YANGDynClass(base=ssm.ssm, is_container='container', yang_name="ssm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_rendezvous_points(self):
    """
    Getter method for rendezvous_points, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/rendezvous_points (container)

    YANG Description: Defines rendezvous points for sparse mode multicast.
    """
    return self.__rendezvous_points
      
  def _set_rendezvous_points(self, v, load=False):
    """
    Setter method for rendezvous_points, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/rendezvous_points (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rendezvous_points is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rendezvous_points() directly.

    YANG Description: Defines rendezvous points for sparse mode multicast.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=rendezvous_points.rendezvous_points, is_container='container', yang_name="rendezvous-points", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rendezvous_points must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=rendezvous_points.rendezvous_points, is_container='container', yang_name="rendezvous-points", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__rendezvous_points = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rendezvous_points(self):
    self.__rendezvous_points = YANGDynClass(base=rendezvous_points.rendezvous_points, is_container='container', yang_name="rendezvous-points", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state (container)

    YANG Description: Global PIM state.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Global PIM state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_sources_joined(self):
    """
    Getter method for sources_joined, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/sources_joined (container)

    YANG Description: List of multicast sources joined.
    """
    return self.__sources_joined
      
  def _set_sources_joined(self, v, load=False):
    """
    Setter method for sources_joined, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/sources_joined (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sources_joined is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sources_joined() directly.

    YANG Description: List of multicast sources joined.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=sources_joined.sources_joined, is_container='container', yang_name="sources-joined", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sources_joined must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=sources_joined.sources_joined, is_container='container', yang_name="sources-joined", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__sources_joined = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sources_joined(self):
    self.__sources_joined = YANGDynClass(base=sources_joined.sources_joined, is_container='container', yang_name="sources-joined", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)

  ssm = __builtin__.property(_get_ssm, _set_ssm)
  rendezvous_points = __builtin__.property(_get_rendezvous_points, _set_rendezvous_points)
  state = __builtin__.property(_get_state, _set_state)
  sources_joined = __builtin__.property(_get_sources_joined, _set_sources_joined)


  _pyangbind_elements = OrderedDict([('ssm', ssm), ('rendezvous_points', rendezvous_points), ('state', state), ('sources_joined', sources_joined), ])


from . import ssm
from . import rendezvous_points
from . import state
from . import sources_joined
class global_(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/protocols/protocol/pim/global. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This container defines global PIM configuration and state
information.
  """
  __slots__ = ('_path_helper', '_extmethods', '__ssm','__rendezvous_points','__state','__sources_joined',)

  _yang_name = 'global'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__ssm = YANGDynClass(base=ssm.ssm, is_container='container', yang_name="ssm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__rendezvous_points = YANGDynClass(base=rendezvous_points.rendezvous_points, is_container='container', yang_name="rendezvous-points", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__sources_joined = YANGDynClass(base=sources_joined.sources_joined, is_container='container', yang_name="sources-joined", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'pim', 'global']

  def _get_ssm(self):
    """
    Getter method for ssm, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/ssm (container)

    YANG Description: Source specific multicast (SSM).
    """
    return self.__ssm
      
  def _set_ssm(self, v, load=False):
    """
    Setter method for ssm, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/ssm (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ssm is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ssm() directly.

    YANG Description: Source specific multicast (SSM).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ssm.ssm, is_container='container', yang_name="ssm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ssm must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ssm.ssm, is_container='container', yang_name="ssm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__ssm = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ssm(self):
    self.__ssm = YANGDynClass(base=ssm.ssm, is_container='container', yang_name="ssm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_rendezvous_points(self):
    """
    Getter method for rendezvous_points, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/rendezvous_points (container)

    YANG Description: Defines rendezvous points for sparse mode multicast.
    """
    return self.__rendezvous_points
      
  def _set_rendezvous_points(self, v, load=False):
    """
    Setter method for rendezvous_points, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/rendezvous_points (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rendezvous_points is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rendezvous_points() directly.

    YANG Description: Defines rendezvous points for sparse mode multicast.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=rendezvous_points.rendezvous_points, is_container='container', yang_name="rendezvous-points", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rendezvous_points must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=rendezvous_points.rendezvous_points, is_container='container', yang_name="rendezvous-points", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__rendezvous_points = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rendezvous_points(self):
    self.__rendezvous_points = YANGDynClass(base=rendezvous_points.rendezvous_points, is_container='container', yang_name="rendezvous-points", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state (container)

    YANG Description: Global PIM state.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Global PIM state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_sources_joined(self):
    """
    Getter method for sources_joined, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/sources_joined (container)

    YANG Description: List of multicast sources joined.
    """
    return self.__sources_joined
      
  def _set_sources_joined(self, v, load=False):
    """
    Setter method for sources_joined, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/sources_joined (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sources_joined is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sources_joined() directly.

    YANG Description: List of multicast sources joined.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=sources_joined.sources_joined, is_container='container', yang_name="sources-joined", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sources_joined must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=sources_joined.sources_joined, is_container='container', yang_name="sources-joined", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__sources_joined = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sources_joined(self):
    self.__sources_joined = YANGDynClass(base=sources_joined.sources_joined, is_container='container', yang_name="sources-joined", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)

  ssm = __builtin__.property(_get_ssm, _set_ssm)
  rendezvous_points = __builtin__.property(_get_rendezvous_points, _set_rendezvous_points)
  state = __builtin__.property(_get_state, _set_state)
  sources_joined = __builtin__.property(_get_sources_joined, _set_sources_joined)


  _pyangbind_elements = OrderedDict([('ssm', ssm), ('rendezvous_points', rendezvous_points), ('state', state), ('sources_joined', sources_joined), ])


