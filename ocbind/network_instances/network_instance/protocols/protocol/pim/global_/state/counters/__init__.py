# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

class counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/protocols/protocol/pim/global/state/counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Global PIM counters.
  """
  __slots__ = ('_path_helper', '_extmethods', '__hello_messages','__join_prune_messages','__bootstrap_messages',)

  _yang_name = 'counters'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__hello_messages = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hello-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    self.__join_prune_messages = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="join-prune-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    self.__bootstrap_messages = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bootstrap-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'pim', 'global', 'state', 'counters']

  def _get_hello_messages(self):
    """
    Getter method for hello_messages, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state/counters/hello_messages (uint32)

    YANG Description: Number of hello messages received.
    """
    return self.__hello_messages
      
  def _set_hello_messages(self, v, load=False):
    """
    Setter method for hello_messages, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state/counters/hello_messages (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hello_messages is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hello_messages() directly.

    YANG Description: Number of hello messages received.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hello-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hello_messages must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hello-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__hello_messages = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hello_messages(self):
    self.__hello_messages = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hello-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)


  def _get_join_prune_messages(self):
    """
    Getter method for join_prune_messages, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state/counters/join_prune_messages (uint32)

    YANG Description: Number of join/prune messages received.
    """
    return self.__join_prune_messages
      
  def _set_join_prune_messages(self, v, load=False):
    """
    Setter method for join_prune_messages, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state/counters/join_prune_messages (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_join_prune_messages is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_join_prune_messages() directly.

    YANG Description: Number of join/prune messages received.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="join-prune-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """join_prune_messages must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="join-prune-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__join_prune_messages = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_join_prune_messages(self):
    self.__join_prune_messages = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="join-prune-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)


  def _get_bootstrap_messages(self):
    """
    Getter method for bootstrap_messages, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state/counters/bootstrap_messages (uint32)

    YANG Description: Number of bootstrap router messages received.
    """
    return self.__bootstrap_messages
      
  def _set_bootstrap_messages(self, v, load=False):
    """
    Setter method for bootstrap_messages, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state/counters/bootstrap_messages (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bootstrap_messages is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bootstrap_messages() directly.

    YANG Description: Number of bootstrap router messages received.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bootstrap-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bootstrap_messages must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bootstrap-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__bootstrap_messages = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bootstrap_messages(self):
    self.__bootstrap_messages = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bootstrap-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)

  hello_messages = __builtin__.property(_get_hello_messages)
  join_prune_messages = __builtin__.property(_get_join_prune_messages)
  bootstrap_messages = __builtin__.property(_get_bootstrap_messages)


  _pyangbind_elements = OrderedDict([('hello_messages', hello_messages), ('join_prune_messages', join_prune_messages), ('bootstrap_messages', bootstrap_messages), ])


class counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/protocols/protocol/pim/global/state/counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Global PIM counters.
  """
  __slots__ = ('_path_helper', '_extmethods', '__hello_messages','__join_prune_messages','__bootstrap_messages',)

  _yang_name = 'counters'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__hello_messages = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hello-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    self.__join_prune_messages = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="join-prune-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    self.__bootstrap_messages = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bootstrap-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'pim', 'global', 'state', 'counters']

  def _get_hello_messages(self):
    """
    Getter method for hello_messages, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state/counters/hello_messages (uint32)

    YANG Description: Number of hello messages received.
    """
    return self.__hello_messages
      
  def _set_hello_messages(self, v, load=False):
    """
    Setter method for hello_messages, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state/counters/hello_messages (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hello_messages is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hello_messages() directly.

    YANG Description: Number of hello messages received.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hello-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hello_messages must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hello-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__hello_messages = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hello_messages(self):
    self.__hello_messages = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hello-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)


  def _get_join_prune_messages(self):
    """
    Getter method for join_prune_messages, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state/counters/join_prune_messages (uint32)

    YANG Description: Number of join/prune messages received.
    """
    return self.__join_prune_messages
      
  def _set_join_prune_messages(self, v, load=False):
    """
    Setter method for join_prune_messages, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state/counters/join_prune_messages (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_join_prune_messages is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_join_prune_messages() directly.

    YANG Description: Number of join/prune messages received.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="join-prune-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """join_prune_messages must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="join-prune-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__join_prune_messages = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_join_prune_messages(self):
    self.__join_prune_messages = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="join-prune-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)


  def _get_bootstrap_messages(self):
    """
    Getter method for bootstrap_messages, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state/counters/bootstrap_messages (uint32)

    YANG Description: Number of bootstrap router messages received.
    """
    return self.__bootstrap_messages
      
  def _set_bootstrap_messages(self, v, load=False):
    """
    Setter method for bootstrap_messages, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state/counters/bootstrap_messages (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bootstrap_messages is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bootstrap_messages() directly.

    YANG Description: Number of bootstrap router messages received.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bootstrap-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bootstrap_messages must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bootstrap-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__bootstrap_messages = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bootstrap_messages(self):
    self.__bootstrap_messages = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bootstrap-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)

  hello_messages = __builtin__.property(_get_hello_messages)
  join_prune_messages = __builtin__.property(_get_join_prune_messages)
  bootstrap_messages = __builtin__.property(_get_bootstrap_messages)


  _pyangbind_elements = OrderedDict([('hello_messages', hello_messages), ('join_prune_messages', join_prune_messages), ('bootstrap_messages', bootstrap_messages), ])


class counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/protocols/protocol/pim/global/state/counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Global PIM counters.
  """
  __slots__ = ('_path_helper', '_extmethods', '__hello_messages','__join_prune_messages','__bootstrap_messages',)

  _yang_name = 'counters'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__hello_messages = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hello-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    self.__join_prune_messages = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="join-prune-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    self.__bootstrap_messages = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bootstrap-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'pim', 'global', 'state', 'counters']

  def _get_hello_messages(self):
    """
    Getter method for hello_messages, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state/counters/hello_messages (uint32)

    YANG Description: Number of hello messages received.
    """
    return self.__hello_messages
      
  def _set_hello_messages(self, v, load=False):
    """
    Setter method for hello_messages, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state/counters/hello_messages (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hello_messages is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hello_messages() directly.

    YANG Description: Number of hello messages received.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hello-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hello_messages must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hello-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__hello_messages = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hello_messages(self):
    self.__hello_messages = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hello-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)


  def _get_join_prune_messages(self):
    """
    Getter method for join_prune_messages, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state/counters/join_prune_messages (uint32)

    YANG Description: Number of join/prune messages received.
    """
    return self.__join_prune_messages
      
  def _set_join_prune_messages(self, v, load=False):
    """
    Setter method for join_prune_messages, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state/counters/join_prune_messages (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_join_prune_messages is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_join_prune_messages() directly.

    YANG Description: Number of join/prune messages received.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="join-prune-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """join_prune_messages must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="join-prune-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__join_prune_messages = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_join_prune_messages(self):
    self.__join_prune_messages = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="join-prune-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)


  def _get_bootstrap_messages(self):
    """
    Getter method for bootstrap_messages, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state/counters/bootstrap_messages (uint32)

    YANG Description: Number of bootstrap router messages received.
    """
    return self.__bootstrap_messages
      
  def _set_bootstrap_messages(self, v, load=False):
    """
    Setter method for bootstrap_messages, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state/counters/bootstrap_messages (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bootstrap_messages is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bootstrap_messages() directly.

    YANG Description: Number of bootstrap router messages received.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bootstrap-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bootstrap_messages must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bootstrap-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__bootstrap_messages = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bootstrap_messages(self):
    self.__bootstrap_messages = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bootstrap-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)

  hello_messages = __builtin__.property(_get_hello_messages)
  join_prune_messages = __builtin__.property(_get_join_prune_messages)
  bootstrap_messages = __builtin__.property(_get_bootstrap_messages)


  _pyangbind_elements = OrderedDict([('hello_messages', hello_messages), ('join_prune_messages', join_prune_messages), ('bootstrap_messages', bootstrap_messages), ])


class counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/protocols/protocol/pim/global/state/counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Global PIM counters.
  """
  __slots__ = ('_path_helper', '_extmethods', '__hello_messages','__join_prune_messages','__bootstrap_messages',)

  _yang_name = 'counters'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__hello_messages = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hello-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    self.__join_prune_messages = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="join-prune-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    self.__bootstrap_messages = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bootstrap-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'pim', 'global', 'state', 'counters']

  def _get_hello_messages(self):
    """
    Getter method for hello_messages, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state/counters/hello_messages (uint32)

    YANG Description: Number of hello messages received.
    """
    return self.__hello_messages
      
  def _set_hello_messages(self, v, load=False):
    """
    Setter method for hello_messages, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state/counters/hello_messages (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hello_messages is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hello_messages() directly.

    YANG Description: Number of hello messages received.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hello-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hello_messages must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hello-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__hello_messages = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hello_messages(self):
    self.__hello_messages = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hello-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)


  def _get_join_prune_messages(self):
    """
    Getter method for join_prune_messages, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state/counters/join_prune_messages (uint32)

    YANG Description: Number of join/prune messages received.
    """
    return self.__join_prune_messages
      
  def _set_join_prune_messages(self, v, load=False):
    """
    Setter method for join_prune_messages, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state/counters/join_prune_messages (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_join_prune_messages is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_join_prune_messages() directly.

    YANG Description: Number of join/prune messages received.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="join-prune-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """join_prune_messages must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="join-prune-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__join_prune_messages = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_join_prune_messages(self):
    self.__join_prune_messages = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="join-prune-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)


  def _get_bootstrap_messages(self):
    """
    Getter method for bootstrap_messages, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state/counters/bootstrap_messages (uint32)

    YANG Description: Number of bootstrap router messages received.
    """
    return self.__bootstrap_messages
      
  def _set_bootstrap_messages(self, v, load=False):
    """
    Setter method for bootstrap_messages, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/global/state/counters/bootstrap_messages (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bootstrap_messages is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bootstrap_messages() directly.

    YANG Description: Number of bootstrap router messages received.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bootstrap-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bootstrap_messages must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bootstrap-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)""",
        })

    self.__bootstrap_messages = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bootstrap_messages(self):
    self.__bootstrap_messages = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bootstrap-messages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint32', is_config=False)

  hello_messages = __builtin__.property(_get_hello_messages)
  join_prune_messages = __builtin__.property(_get_join_prune_messages)
  bootstrap_messages = __builtin__.property(_get_bootstrap_messages)


  _pyangbind_elements = OrderedDict([('hello_messages', hello_messages), ('join_prune_messages', join_prune_messages), ('bootstrap_messages', bootstrap_messages), ])


