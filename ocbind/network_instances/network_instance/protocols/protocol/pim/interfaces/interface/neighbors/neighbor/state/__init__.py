# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Details about a specific PIM neighbor.
  """
  __slots__ = ('_path_helper', '_extmethods', '__neighbor_address','__dr_address','__neighbor_established','__neighbor_expires','__mode',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__neighbor_address = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)
    self.__dr_address = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dr-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)
    self.__neighbor_established = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-established", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    self.__neighbor_expires = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-expires", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    self.__mode = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}},), is_leaf=True, yang_name="mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'pim', 'interfaces', 'interface', 'neighbors', 'neighbor', 'state']

  def _get_neighbor_address(self):
    """
    Getter method for neighbor_address, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor_address (inet:ipv4-address)

    YANG Description: IPv4 address of neighbor router.
    """
    return self.__neighbor_address
      
  def _set_neighbor_address(self, v, load=False):
    """
    Setter method for neighbor_address, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor_address (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor_address() directly.

    YANG Description: IPv4 address of neighbor router.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor_address must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__neighbor_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor_address(self):
    self.__neighbor_address = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)


  def _get_dr_address(self):
    """
    Getter method for dr_address, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/dr_address (inet:ipv4-address)

    YANG Description: IPv4 address of designated router.
    """
    return self.__dr_address
      
  def _set_dr_address(self, v, load=False):
    """
    Setter method for dr_address, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/dr_address (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dr_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dr_address() directly.

    YANG Description: IPv4 address of designated router.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dr-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dr_address must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dr-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__dr_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dr_address(self):
    self.__dr_address = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dr-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)


  def _get_neighbor_established(self):
    """
    Getter method for neighbor_established, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor_established (oc-types:timeticks64)

    YANG Description: This timestamp indicates the time that the
PIM neighbor adjacency established. It is expressed
relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).

The PIM session uptime can be computed by clients
as the difference between this value and the
current time in UTC.
    """
    return self.__neighbor_established
      
  def _set_neighbor_established(self, v, load=False):
    """
    Setter method for neighbor_established, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor_established (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor_established is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor_established() directly.

    YANG Description: This timestamp indicates the time that the
PIM neighbor adjacency established. It is expressed
relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).

The PIM session uptime can be computed by clients
as the difference between this value and the
current time in UTC.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-established", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor_established must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-established", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__neighbor_established = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor_established(self):
    self.__neighbor_established = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-established", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)


  def _get_neighbor_expires(self):
    """
    Getter method for neighbor_expires, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor_expires (oc-types:timeticks64)

    YANG Description: This timestamp indicates the time that the
PIM neighbor adjacency will expire should hello
messages fail to arrive from the neighbor. The value
is expressed relative to the Unix Epoch (Jan 1, 1970
00:00:00 UTC).
    """
    return self.__neighbor_expires
      
  def _set_neighbor_expires(self, v, load=False):
    """
    Setter method for neighbor_expires, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor_expires (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor_expires is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor_expires() directly.

    YANG Description: This timestamp indicates the time that the
PIM neighbor adjacency will expire should hello
messages fail to arrive from the neighbor. The value
is expressed relative to the Unix Epoch (Jan 1, 1970
00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-expires", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor_expires must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-expires", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__neighbor_expires = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor_expires(self):
    self.__neighbor_expires = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-expires", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)


  def _get_mode(self):
    """
    Getter method for mode, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/mode (identityref)

    YANG Description: PIM mode in use when delivering multicast traffic
via this neighbor.
    """
    return self.__mode
      
  def _set_mode(self, v, load=False):
    """
    Setter method for mode, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/mode (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mode() directly.

    YANG Description: PIM mode in use when delivering multicast traffic
via this neighbor.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}},), is_leaf=True, yang_name="mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mode must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}},), is_leaf=True, yang_name="mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)""",
        })

    self.__mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mode(self):
    self.__mode = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}},), is_leaf=True, yang_name="mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)

  neighbor_address = __builtin__.property(_get_neighbor_address)
  dr_address = __builtin__.property(_get_dr_address)
  neighbor_established = __builtin__.property(_get_neighbor_established)
  neighbor_expires = __builtin__.property(_get_neighbor_expires)
  mode = __builtin__.property(_get_mode)


  _pyangbind_elements = OrderedDict([('neighbor_address', neighbor_address), ('dr_address', dr_address), ('neighbor_established', neighbor_established), ('neighbor_expires', neighbor_expires), ('mode', mode), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Details about a specific PIM neighbor.
  """
  __slots__ = ('_path_helper', '_extmethods', '__neighbor_address','__dr_address','__neighbor_established','__neighbor_expires','__mode',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__neighbor_address = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)
    self.__dr_address = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dr-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)
    self.__neighbor_established = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-established", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    self.__neighbor_expires = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-expires", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    self.__mode = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}},), is_leaf=True, yang_name="mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'pim', 'interfaces', 'interface', 'neighbors', 'neighbor', 'state']

  def _get_neighbor_address(self):
    """
    Getter method for neighbor_address, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor_address (inet:ipv4-address)

    YANG Description: IPv4 address of neighbor router.
    """
    return self.__neighbor_address
      
  def _set_neighbor_address(self, v, load=False):
    """
    Setter method for neighbor_address, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor_address (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor_address() directly.

    YANG Description: IPv4 address of neighbor router.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor_address must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__neighbor_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor_address(self):
    self.__neighbor_address = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)


  def _get_dr_address(self):
    """
    Getter method for dr_address, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/dr_address (inet:ipv4-address)

    YANG Description: IPv4 address of designated router.
    """
    return self.__dr_address
      
  def _set_dr_address(self, v, load=False):
    """
    Setter method for dr_address, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/dr_address (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dr_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dr_address() directly.

    YANG Description: IPv4 address of designated router.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dr-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dr_address must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dr-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__dr_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dr_address(self):
    self.__dr_address = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dr-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)


  def _get_neighbor_established(self):
    """
    Getter method for neighbor_established, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor_established (oc-types:timeticks64)

    YANG Description: This timestamp indicates the time that the
PIM neighbor adjacency established. It is expressed
relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).

The PIM session uptime can be computed by clients
as the difference between this value and the
current time in UTC.
    """
    return self.__neighbor_established
      
  def _set_neighbor_established(self, v, load=False):
    """
    Setter method for neighbor_established, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor_established (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor_established is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor_established() directly.

    YANG Description: This timestamp indicates the time that the
PIM neighbor adjacency established. It is expressed
relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).

The PIM session uptime can be computed by clients
as the difference between this value and the
current time in UTC.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-established", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor_established must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-established", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__neighbor_established = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor_established(self):
    self.__neighbor_established = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-established", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)


  def _get_neighbor_expires(self):
    """
    Getter method for neighbor_expires, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor_expires (oc-types:timeticks64)

    YANG Description: This timestamp indicates the time that the
PIM neighbor adjacency will expire should hello
messages fail to arrive from the neighbor. The value
is expressed relative to the Unix Epoch (Jan 1, 1970
00:00:00 UTC).
    """
    return self.__neighbor_expires
      
  def _set_neighbor_expires(self, v, load=False):
    """
    Setter method for neighbor_expires, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor_expires (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor_expires is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor_expires() directly.

    YANG Description: This timestamp indicates the time that the
PIM neighbor adjacency will expire should hello
messages fail to arrive from the neighbor. The value
is expressed relative to the Unix Epoch (Jan 1, 1970
00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-expires", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor_expires must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-expires", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__neighbor_expires = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor_expires(self):
    self.__neighbor_expires = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-expires", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)


  def _get_mode(self):
    """
    Getter method for mode, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/mode (identityref)

    YANG Description: PIM mode in use when delivering multicast traffic
via this neighbor.
    """
    return self.__mode
      
  def _set_mode(self, v, load=False):
    """
    Setter method for mode, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/mode (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mode() directly.

    YANG Description: PIM mode in use when delivering multicast traffic
via this neighbor.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}},), is_leaf=True, yang_name="mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mode must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}},), is_leaf=True, yang_name="mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)""",
        })

    self.__mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mode(self):
    self.__mode = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}},), is_leaf=True, yang_name="mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)

  neighbor_address = __builtin__.property(_get_neighbor_address)
  dr_address = __builtin__.property(_get_dr_address)
  neighbor_established = __builtin__.property(_get_neighbor_established)
  neighbor_expires = __builtin__.property(_get_neighbor_expires)
  mode = __builtin__.property(_get_mode)


  _pyangbind_elements = OrderedDict([('neighbor_address', neighbor_address), ('dr_address', dr_address), ('neighbor_established', neighbor_established), ('neighbor_expires', neighbor_expires), ('mode', mode), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Details about a specific PIM neighbor.
  """
  __slots__ = ('_path_helper', '_extmethods', '__neighbor_address','__dr_address','__neighbor_established','__neighbor_expires','__mode',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__neighbor_address = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)
    self.__dr_address = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dr-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)
    self.__neighbor_established = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-established", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    self.__neighbor_expires = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-expires", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    self.__mode = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}},), is_leaf=True, yang_name="mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'pim', 'interfaces', 'interface', 'neighbors', 'neighbor', 'state']

  def _get_neighbor_address(self):
    """
    Getter method for neighbor_address, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor_address (inet:ipv4-address)

    YANG Description: IPv4 address of neighbor router.
    """
    return self.__neighbor_address
      
  def _set_neighbor_address(self, v, load=False):
    """
    Setter method for neighbor_address, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor_address (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor_address() directly.

    YANG Description: IPv4 address of neighbor router.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor_address must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__neighbor_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor_address(self):
    self.__neighbor_address = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)


  def _get_dr_address(self):
    """
    Getter method for dr_address, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/dr_address (inet:ipv4-address)

    YANG Description: IPv4 address of designated router.
    """
    return self.__dr_address
      
  def _set_dr_address(self, v, load=False):
    """
    Setter method for dr_address, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/dr_address (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dr_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dr_address() directly.

    YANG Description: IPv4 address of designated router.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dr-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dr_address must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dr-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__dr_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dr_address(self):
    self.__dr_address = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dr-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)


  def _get_neighbor_established(self):
    """
    Getter method for neighbor_established, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor_established (oc-types:timeticks64)

    YANG Description: This timestamp indicates the time that the
PIM neighbor adjacency established. It is expressed
relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).

The PIM session uptime can be computed by clients
as the difference between this value and the
current time in UTC.
    """
    return self.__neighbor_established
      
  def _set_neighbor_established(self, v, load=False):
    """
    Setter method for neighbor_established, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor_established (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor_established is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor_established() directly.

    YANG Description: This timestamp indicates the time that the
PIM neighbor adjacency established. It is expressed
relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).

The PIM session uptime can be computed by clients
as the difference between this value and the
current time in UTC.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-established", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor_established must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-established", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__neighbor_established = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor_established(self):
    self.__neighbor_established = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-established", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)


  def _get_neighbor_expires(self):
    """
    Getter method for neighbor_expires, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor_expires (oc-types:timeticks64)

    YANG Description: This timestamp indicates the time that the
PIM neighbor adjacency will expire should hello
messages fail to arrive from the neighbor. The value
is expressed relative to the Unix Epoch (Jan 1, 1970
00:00:00 UTC).
    """
    return self.__neighbor_expires
      
  def _set_neighbor_expires(self, v, load=False):
    """
    Setter method for neighbor_expires, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor_expires (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor_expires is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor_expires() directly.

    YANG Description: This timestamp indicates the time that the
PIM neighbor adjacency will expire should hello
messages fail to arrive from the neighbor. The value
is expressed relative to the Unix Epoch (Jan 1, 1970
00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-expires", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor_expires must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-expires", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__neighbor_expires = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor_expires(self):
    self.__neighbor_expires = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-expires", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)


  def _get_mode(self):
    """
    Getter method for mode, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/mode (identityref)

    YANG Description: PIM mode in use when delivering multicast traffic
via this neighbor.
    """
    return self.__mode
      
  def _set_mode(self, v, load=False):
    """
    Setter method for mode, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/mode (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mode() directly.

    YANG Description: PIM mode in use when delivering multicast traffic
via this neighbor.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}},), is_leaf=True, yang_name="mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mode must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}},), is_leaf=True, yang_name="mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)""",
        })

    self.__mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mode(self):
    self.__mode = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}},), is_leaf=True, yang_name="mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)

  neighbor_address = __builtin__.property(_get_neighbor_address)
  dr_address = __builtin__.property(_get_dr_address)
  neighbor_established = __builtin__.property(_get_neighbor_established)
  neighbor_expires = __builtin__.property(_get_neighbor_expires)
  mode = __builtin__.property(_get_mode)


  _pyangbind_elements = OrderedDict([('neighbor_address', neighbor_address), ('dr_address', dr_address), ('neighbor_established', neighbor_established), ('neighbor_expires', neighbor_expires), ('mode', mode), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Details about a specific PIM neighbor.
  """
  __slots__ = ('_path_helper', '_extmethods', '__neighbor_address','__dr_address','__neighbor_established','__neighbor_expires','__mode',)

  _yang_name = 'state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__neighbor_address = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)
    self.__dr_address = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dr-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)
    self.__neighbor_established = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-established", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    self.__neighbor_expires = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-expires", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    self.__mode = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}},), is_leaf=True, yang_name="mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'protocols', 'protocol', 'pim', 'interfaces', 'interface', 'neighbors', 'neighbor', 'state']

  def _get_neighbor_address(self):
    """
    Getter method for neighbor_address, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor_address (inet:ipv4-address)

    YANG Description: IPv4 address of neighbor router.
    """
    return self.__neighbor_address
      
  def _set_neighbor_address(self, v, load=False):
    """
    Setter method for neighbor_address, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor_address (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor_address() directly.

    YANG Description: IPv4 address of neighbor router.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor_address must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__neighbor_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor_address(self):
    self.__neighbor_address = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="neighbor-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)


  def _get_dr_address(self):
    """
    Getter method for dr_address, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/dr_address (inet:ipv4-address)

    YANG Description: IPv4 address of designated router.
    """
    return self.__dr_address
      
  def _set_dr_address(self, v, load=False):
    """
    Setter method for dr_address, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/dr_address (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dr_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dr_address() directly.

    YANG Description: IPv4 address of designated router.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dr-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dr_address must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dr-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__dr_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dr_address(self):
    self.__dr_address = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dr-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='inet:ipv4-address', is_config=False)


  def _get_neighbor_established(self):
    """
    Getter method for neighbor_established, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor_established (oc-types:timeticks64)

    YANG Description: This timestamp indicates the time that the
PIM neighbor adjacency established. It is expressed
relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).

The PIM session uptime can be computed by clients
as the difference between this value and the
current time in UTC.
    """
    return self.__neighbor_established
      
  def _set_neighbor_established(self, v, load=False):
    """
    Setter method for neighbor_established, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor_established (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor_established is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor_established() directly.

    YANG Description: This timestamp indicates the time that the
PIM neighbor adjacency established. It is expressed
relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).

The PIM session uptime can be computed by clients
as the difference between this value and the
current time in UTC.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-established", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor_established must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-established", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__neighbor_established = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor_established(self):
    self.__neighbor_established = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-established", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)


  def _get_neighbor_expires(self):
    """
    Getter method for neighbor_expires, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor_expires (oc-types:timeticks64)

    YANG Description: This timestamp indicates the time that the
PIM neighbor adjacency will expire should hello
messages fail to arrive from the neighbor. The value
is expressed relative to the Unix Epoch (Jan 1, 1970
00:00:00 UTC).
    """
    return self.__neighbor_expires
      
  def _set_neighbor_expires(self, v, load=False):
    """
    Setter method for neighbor_expires, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor_expires (oc-types:timeticks64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor_expires is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor_expires() directly.

    YANG Description: This timestamp indicates the time that the
PIM neighbor adjacency will expire should hello
messages fail to arrive from the neighbor. The value
is expressed relative to the Unix Epoch (Jan 1, 1970
00:00:00 UTC).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-expires", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor_expires must be of a type compatible with oc-types:timeticks64""",
          'defined-type': "oc-types:timeticks64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-expires", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)""",
        })

    self.__neighbor_expires = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor_expires(self):
    self.__neighbor_expires = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="neighbor-expires", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-types:timeticks64', is_config=False)


  def _get_mode(self):
    """
    Getter method for mode, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/mode (identityref)

    YANG Description: PIM mode in use when delivering multicast traffic
via this neighbor.
    """
    return self.__mode
      
  def _set_mode(self, v, load=False):
    """
    Setter method for mode, mapped from YANG variable /network_instances/network_instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/mode (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mode() directly.

    YANG Description: PIM mode in use when delivering multicast traffic
via this neighbor.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}},), is_leaf=True, yang_name="mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mode must be of a type compatible with identityref""",
          'defined-type': "openconfig-network-instance:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}},), is_leaf=True, yang_name="mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)""",
        })

    self.__mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mode(self):
    self.__mode = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_type="dict_key", restriction_arg={'PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_SPARSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}, 'oc-pim-types:PIM_MODE_DENSE': {'@module': 'openconfig-pim-types', '@namespace': 'http://openconfig.net/yang/pim/types'}},), is_leaf=True, yang_name="mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='identityref', is_config=False)

  neighbor_address = __builtin__.property(_get_neighbor_address)
  dr_address = __builtin__.property(_get_dr_address)
  neighbor_established = __builtin__.property(_get_neighbor_established)
  neighbor_expires = __builtin__.property(_get_neighbor_expires)
  mode = __builtin__.property(_get_mode)


  _pyangbind_elements = OrderedDict([('neighbor_address', neighbor_address), ('dr_address', dr_address), ('neighbor_established', neighbor_established), ('neighbor_expires', neighbor_expires), ('mode', mode), ])


