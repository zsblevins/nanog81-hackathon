# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

from . import state
from . import segment_lists
class candidate_path(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: An individual candidate path within the list of candidate
paths associated with this SR-TE policy. It is uniquely
identified by the combination of protocol-origin,
originator and discriminator
  """
  __slots__ = ('_path_helper', '_extmethods', '__protocol_origin','__originator_asn','__originator_addr','__discriminator','__state','__segment_lists',)

  _yang_name = 'candidate-path'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__protocol_origin = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="protocol-origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__originator_asn = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="originator-asn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__originator_addr = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="originator-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__discriminator = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__segment_lists = YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'segment-routing', 'te-policies', 'te-policy', 'candidate-paths', 'candidate-path']

  def _get_protocol_origin(self):
    """
    Getter method for protocol_origin, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/protocol_origin (leafref)

    YANG Description: A reference to the component or protocol that originates
or signals the candidate path
    """
    return self.__protocol_origin
      
  def _set_protocol_origin(self, v, load=False):
    """
    Setter method for protocol_origin, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/protocol_origin (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_protocol_origin is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_protocol_origin() directly.

    YANG Description: A reference to the component or protocol that originates
or signals the candidate path
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="protocol-origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """protocol_origin must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="protocol-origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__protocol_origin = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_protocol_origin(self):
    self.__protocol_origin = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="protocol-origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_originator_asn(self):
    """
    Getter method for originator_asn, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/originator_asn (leafref)

    YANG Description: A reference to the autonomous system that the node
originating the candidate path locates.
    """
    return self.__originator_asn
      
  def _set_originator_asn(self, v, load=False):
    """
    Setter method for originator_asn, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/originator_asn (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_originator_asn is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_originator_asn() directly.

    YANG Description: A reference to the autonomous system that the node
originating the candidate path locates.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="originator-asn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """originator_asn must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="originator-asn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__originator_asn = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_originator_asn(self):
    self.__originator_asn = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="originator-asn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_originator_addr(self):
    """
    Getter method for originator_addr, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/originator_addr (leafref)

    YANG Description: A reference to the address of the node originating the
candidate path.
    """
    return self.__originator_addr
      
  def _set_originator_addr(self, v, load=False):
    """
    Setter method for originator_addr, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/originator_addr (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_originator_addr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_originator_addr() directly.

    YANG Description: A reference to the address of the node originating the
candidate path.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="originator-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """originator_addr must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="originator-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__originator_addr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_originator_addr(self):
    self.__originator_addr = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="originator-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_discriminator(self):
    """
    Getter method for discriminator, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/discriminator (leafref)

    YANG Description: A reference to the ID uniquely identifying the path
within the context of a policy learnt from a protocol.
    """
    return self.__discriminator
      
  def _set_discriminator(self, v, load=False):
    """
    Setter method for discriminator, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/discriminator (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_discriminator is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_discriminator() directly.

    YANG Description: A reference to the ID uniquely identifying the path
within the context of a policy learnt from a protocol.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """discriminator must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__discriminator = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_discriminator(self):
    self.__discriminator = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/state (container)

    YANG Description: Operational state parameters associated with SR-TE
candidate paths.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters associated with SR-TE
candidate paths.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_segment_lists(self):
    """
    Getter method for segment_lists, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/segment_lists (container)

    YANG Description: A collection of segment lists associated with the policy
candidate path.
    """
    return self.__segment_lists
      
  def _set_segment_lists(self, v, load=False):
    """
    Setter method for segment_lists, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/segment_lists (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_segment_lists is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_segment_lists() directly.

    YANG Description: A collection of segment lists associated with the policy
candidate path.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """segment_lists must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__segment_lists = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_segment_lists(self):
    self.__segment_lists = YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

  protocol_origin = __builtin__.property(_get_protocol_origin)
  originator_asn = __builtin__.property(_get_originator_asn)
  originator_addr = __builtin__.property(_get_originator_addr)
  discriminator = __builtin__.property(_get_discriminator)
  state = __builtin__.property(_get_state)
  segment_lists = __builtin__.property(_get_segment_lists)


  _pyangbind_elements = OrderedDict([('protocol_origin', protocol_origin), ('originator_asn', originator_asn), ('originator_addr', originator_addr), ('discriminator', discriminator), ('state', state), ('segment_lists', segment_lists), ])


from . import state
from . import segment_lists
class candidate_path(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: An individual candidate path within the list of candidate
paths associated with this SR-TE policy. It is uniquely
identified by the combination of protocol-origin,
originator and discriminator
  """
  __slots__ = ('_path_helper', '_extmethods', '__protocol_origin','__originator_asn','__originator_addr','__discriminator','__state','__segment_lists',)

  _yang_name = 'candidate-path'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__protocol_origin = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="protocol-origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__originator_asn = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="originator-asn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__originator_addr = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="originator-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__discriminator = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__segment_lists = YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'segment-routing', 'te-policies', 'te-policy', 'candidate-paths', 'candidate-path']

  def _get_protocol_origin(self):
    """
    Getter method for protocol_origin, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/protocol_origin (leafref)

    YANG Description: A reference to the component or protocol that originates
or signals the candidate path
    """
    return self.__protocol_origin
      
  def _set_protocol_origin(self, v, load=False):
    """
    Setter method for protocol_origin, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/protocol_origin (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_protocol_origin is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_protocol_origin() directly.

    YANG Description: A reference to the component or protocol that originates
or signals the candidate path
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="protocol-origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """protocol_origin must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="protocol-origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__protocol_origin = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_protocol_origin(self):
    self.__protocol_origin = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="protocol-origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_originator_asn(self):
    """
    Getter method for originator_asn, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/originator_asn (leafref)

    YANG Description: A reference to the autonomous system that the node
originating the candidate path locates.
    """
    return self.__originator_asn
      
  def _set_originator_asn(self, v, load=False):
    """
    Setter method for originator_asn, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/originator_asn (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_originator_asn is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_originator_asn() directly.

    YANG Description: A reference to the autonomous system that the node
originating the candidate path locates.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="originator-asn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """originator_asn must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="originator-asn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__originator_asn = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_originator_asn(self):
    self.__originator_asn = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="originator-asn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_originator_addr(self):
    """
    Getter method for originator_addr, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/originator_addr (leafref)

    YANG Description: A reference to the address of the node originating the
candidate path.
    """
    return self.__originator_addr
      
  def _set_originator_addr(self, v, load=False):
    """
    Setter method for originator_addr, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/originator_addr (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_originator_addr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_originator_addr() directly.

    YANG Description: A reference to the address of the node originating the
candidate path.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="originator-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """originator_addr must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="originator-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__originator_addr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_originator_addr(self):
    self.__originator_addr = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="originator-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_discriminator(self):
    """
    Getter method for discriminator, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/discriminator (leafref)

    YANG Description: A reference to the ID uniquely identifying the path
within the context of a policy learnt from a protocol.
    """
    return self.__discriminator
      
  def _set_discriminator(self, v, load=False):
    """
    Setter method for discriminator, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/discriminator (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_discriminator is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_discriminator() directly.

    YANG Description: A reference to the ID uniquely identifying the path
within the context of a policy learnt from a protocol.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """discriminator must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__discriminator = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_discriminator(self):
    self.__discriminator = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/state (container)

    YANG Description: Operational state parameters associated with SR-TE
candidate paths.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters associated with SR-TE
candidate paths.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_segment_lists(self):
    """
    Getter method for segment_lists, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/segment_lists (container)

    YANG Description: A collection of segment lists associated with the policy
candidate path.
    """
    return self.__segment_lists
      
  def _set_segment_lists(self, v, load=False):
    """
    Setter method for segment_lists, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/segment_lists (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_segment_lists is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_segment_lists() directly.

    YANG Description: A collection of segment lists associated with the policy
candidate path.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """segment_lists must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__segment_lists = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_segment_lists(self):
    self.__segment_lists = YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

  protocol_origin = __builtin__.property(_get_protocol_origin)
  originator_asn = __builtin__.property(_get_originator_asn)
  originator_addr = __builtin__.property(_get_originator_addr)
  discriminator = __builtin__.property(_get_discriminator)
  state = __builtin__.property(_get_state)
  segment_lists = __builtin__.property(_get_segment_lists)


  _pyangbind_elements = OrderedDict([('protocol_origin', protocol_origin), ('originator_asn', originator_asn), ('originator_addr', originator_addr), ('discriminator', discriminator), ('state', state), ('segment_lists', segment_lists), ])


from . import state
from . import segment_lists
class candidate_path(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: An individual candidate path within the list of candidate
paths associated with this SR-TE policy. It is uniquely
identified by the combination of protocol-origin,
originator and discriminator
  """
  __slots__ = ('_path_helper', '_extmethods', '__protocol_origin','__originator_asn','__originator_addr','__discriminator','__state','__segment_lists',)

  _yang_name = 'candidate-path'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__protocol_origin = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="protocol-origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__originator_asn = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="originator-asn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__originator_addr = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="originator-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__discriminator = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__segment_lists = YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'segment-routing', 'te-policies', 'te-policy', 'candidate-paths', 'candidate-path']

  def _get_protocol_origin(self):
    """
    Getter method for protocol_origin, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/protocol_origin (leafref)

    YANG Description: A reference to the component or protocol that originates
or signals the candidate path
    """
    return self.__protocol_origin
      
  def _set_protocol_origin(self, v, load=False):
    """
    Setter method for protocol_origin, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/protocol_origin (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_protocol_origin is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_protocol_origin() directly.

    YANG Description: A reference to the component or protocol that originates
or signals the candidate path
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="protocol-origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """protocol_origin must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="protocol-origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__protocol_origin = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_protocol_origin(self):
    self.__protocol_origin = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="protocol-origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_originator_asn(self):
    """
    Getter method for originator_asn, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/originator_asn (leafref)

    YANG Description: A reference to the autonomous system that the node
originating the candidate path locates.
    """
    return self.__originator_asn
      
  def _set_originator_asn(self, v, load=False):
    """
    Setter method for originator_asn, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/originator_asn (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_originator_asn is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_originator_asn() directly.

    YANG Description: A reference to the autonomous system that the node
originating the candidate path locates.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="originator-asn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """originator_asn must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="originator-asn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__originator_asn = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_originator_asn(self):
    self.__originator_asn = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="originator-asn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_originator_addr(self):
    """
    Getter method for originator_addr, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/originator_addr (leafref)

    YANG Description: A reference to the address of the node originating the
candidate path.
    """
    return self.__originator_addr
      
  def _set_originator_addr(self, v, load=False):
    """
    Setter method for originator_addr, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/originator_addr (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_originator_addr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_originator_addr() directly.

    YANG Description: A reference to the address of the node originating the
candidate path.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="originator-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """originator_addr must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="originator-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__originator_addr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_originator_addr(self):
    self.__originator_addr = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="originator-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_discriminator(self):
    """
    Getter method for discriminator, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/discriminator (leafref)

    YANG Description: A reference to the ID uniquely identifying the path
within the context of a policy learnt from a protocol.
    """
    return self.__discriminator
      
  def _set_discriminator(self, v, load=False):
    """
    Setter method for discriminator, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/discriminator (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_discriminator is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_discriminator() directly.

    YANG Description: A reference to the ID uniquely identifying the path
within the context of a policy learnt from a protocol.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """discriminator must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__discriminator = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_discriminator(self):
    self.__discriminator = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/state (container)

    YANG Description: Operational state parameters associated with SR-TE
candidate paths.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters associated with SR-TE
candidate paths.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_segment_lists(self):
    """
    Getter method for segment_lists, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/segment_lists (container)

    YANG Description: A collection of segment lists associated with the policy
candidate path.
    """
    return self.__segment_lists
      
  def _set_segment_lists(self, v, load=False):
    """
    Setter method for segment_lists, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/segment_lists (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_segment_lists is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_segment_lists() directly.

    YANG Description: A collection of segment lists associated with the policy
candidate path.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """segment_lists must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__segment_lists = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_segment_lists(self):
    self.__segment_lists = YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

  protocol_origin = __builtin__.property(_get_protocol_origin)
  originator_asn = __builtin__.property(_get_originator_asn)
  originator_addr = __builtin__.property(_get_originator_addr)
  discriminator = __builtin__.property(_get_discriminator)
  state = __builtin__.property(_get_state)
  segment_lists = __builtin__.property(_get_segment_lists)


  _pyangbind_elements = OrderedDict([('protocol_origin', protocol_origin), ('originator_asn', originator_asn), ('originator_addr', originator_addr), ('discriminator', discriminator), ('state', state), ('segment_lists', segment_lists), ])


from . import state
from . import segment_lists
class candidate_path(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: An individual candidate path within the list of candidate
paths associated with this SR-TE policy. It is uniquely
identified by the combination of protocol-origin,
originator and discriminator
  """
  __slots__ = ('_path_helper', '_extmethods', '__protocol_origin','__originator_asn','__originator_addr','__discriminator','__state','__segment_lists',)

  _yang_name = 'candidate-path'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__protocol_origin = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="protocol-origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__originator_asn = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="originator-asn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__originator_addr = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="originator-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__discriminator = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__segment_lists = YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'segment-routing', 'te-policies', 'te-policy', 'candidate-paths', 'candidate-path']

  def _get_protocol_origin(self):
    """
    Getter method for protocol_origin, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/protocol_origin (leafref)

    YANG Description: A reference to the component or protocol that originates
or signals the candidate path
    """
    return self.__protocol_origin
      
  def _set_protocol_origin(self, v, load=False):
    """
    Setter method for protocol_origin, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/protocol_origin (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_protocol_origin is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_protocol_origin() directly.

    YANG Description: A reference to the component or protocol that originates
or signals the candidate path
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="protocol-origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """protocol_origin must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="protocol-origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__protocol_origin = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_protocol_origin(self):
    self.__protocol_origin = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="protocol-origin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_originator_asn(self):
    """
    Getter method for originator_asn, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/originator_asn (leafref)

    YANG Description: A reference to the autonomous system that the node
originating the candidate path locates.
    """
    return self.__originator_asn
      
  def _set_originator_asn(self, v, load=False):
    """
    Setter method for originator_asn, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/originator_asn (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_originator_asn is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_originator_asn() directly.

    YANG Description: A reference to the autonomous system that the node
originating the candidate path locates.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="originator-asn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """originator_asn must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="originator-asn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__originator_asn = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_originator_asn(self):
    self.__originator_asn = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="originator-asn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_originator_addr(self):
    """
    Getter method for originator_addr, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/originator_addr (leafref)

    YANG Description: A reference to the address of the node originating the
candidate path.
    """
    return self.__originator_addr
      
  def _set_originator_addr(self, v, load=False):
    """
    Setter method for originator_addr, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/originator_addr (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_originator_addr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_originator_addr() directly.

    YANG Description: A reference to the address of the node originating the
candidate path.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="originator-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """originator_addr must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="originator-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__originator_addr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_originator_addr(self):
    self.__originator_addr = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="originator-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_discriminator(self):
    """
    Getter method for discriminator, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/discriminator (leafref)

    YANG Description: A reference to the ID uniquely identifying the path
within the context of a policy learnt from a protocol.
    """
    return self.__discriminator
      
  def _set_discriminator(self, v, load=False):
    """
    Setter method for discriminator, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/discriminator (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_discriminator is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_discriminator() directly.

    YANG Description: A reference to the ID uniquely identifying the path
within the context of a policy learnt from a protocol.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """discriminator must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__discriminator = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_discriminator(self):
    self.__discriminator = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="discriminator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/state (container)

    YANG Description: Operational state parameters associated with SR-TE
candidate paths.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: Operational state parameters associated with SR-TE
candidate paths.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_segment_lists(self):
    """
    Getter method for segment_lists, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/segment_lists (container)

    YANG Description: A collection of segment lists associated with the policy
candidate path.
    """
    return self.__segment_lists
      
  def _set_segment_lists(self, v, load=False):
    """
    Setter method for segment_lists, mapped from YANG variable /network_instances/network_instance/segment_routing/te_policies/te_policy/candidate_paths/candidate_path/segment_lists (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_segment_lists is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_segment_lists() directly.

    YANG Description: A collection of segment lists associated with the policy
candidate path.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """segment_lists must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__segment_lists = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_segment_lists(self):
    self.__segment_lists = YANGDynClass(base=segment_lists.segment_lists, is_container='container', yang_name="segment-lists", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)

  protocol_origin = __builtin__.property(_get_protocol_origin)
  originator_asn = __builtin__.property(_get_originator_asn)
  originator_addr = __builtin__.property(_get_originator_addr)
  discriminator = __builtin__.property(_get_discriminator)
  state = __builtin__.property(_get_state)
  segment_lists = __builtin__.property(_get_segment_lists)


  _pyangbind_elements = OrderedDict([('protocol_origin', protocol_origin), ('originator_asn', originator_asn), ('originator_addr', originator_addr), ('discriminator', discriminator), ('state', state), ('segment_lists', segment_lists), ])


